<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Nototaku</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2021-06-13T15:02:45.517Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Narlim</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>magic trackpad2 支持gnome手势</title>
    <link href="http://yoursite.com/2021/06/13/magic-trackpad2-%E6%94%AF%E6%8C%81gnome%E6%89%8B%E5%8A%BF/"/>
    <id>http://yoursite.com/2021/06/13/magic-trackpad2-%E6%94%AF%E6%8C%81gnome%E6%89%8B%E5%8A%BF/</id>
    <published>2021-06-13T09:39:57.000Z</published>
    <updated>2021-06-13T15:02:45.517Z</updated>
    
    <content type="html"><![CDATA[<p>因为gnome40的触摸板手势是一大特色，而且在使用macbook的时候感觉苹果的触摸板确实挺好用的，于是就是入手了一个magic trackpad2，本来想着是直接蓝牙连接的我的arch上面就可以用了，没想的并没有开箱即用，这里就记录一下配置的过程，防止以后忘记。</p><a id="more"></a><h3 id="连接到蓝牙"><a href="#连接到蓝牙" class="headerlink" title="连接到蓝牙"></a>连接到蓝牙</h3><p>很简单，打开trackpad上面的一个开关。默认就可以连接了，但是却有一个报错：<br><code>profiles/input/device.c:ioctl_is_connected() Can&#39;t open HIDP control socket</code><br>在网上查了半天，终于在<a href="https://wiki.archlinux.org/title/Bluetooth_mouse" target="_blank" rel="noopener">‘https://wiki.archlinux.org/title/Bluetooth_mouse’</a>里面找到一个关于hid的配置：  </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> Configuration file <span class="keyword">for</span> the input service</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> This section contains options <span class="built_in">which</span> are not specific to any</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> particular interface</span></span><br><span class="line">[General]</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> Set idle timeout (<span class="keyword">in</span> minutes) before the connection will</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> be disconnect (defaults to 0 <span class="keyword">for</span> no timeout)</span></span><br><span class="line">IdleTimeout=0</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">Enable HID protocol handling <span class="keyword">in</span> userspace input profile</span></span><br><span class="line"><span class="meta">#</span><span class="bash">Defaults to <span class="literal">false</span>(hidp handled <span class="keyword">in</span> hidp kernel module)</span></span><br><span class="line">UserspaceHID=true</span><br></pre></td></tr></table></figure><p>把上面的配置写入或者创建文件：<code>/etc/bluetooth/input.conf</code>，重启bluetooth，终于连上了。按照这个配置的意思默认应该用的是内核模块的hidp,不知道为啥我这里用不了。</p><h3 id="支持gnome40的手势"><a href="#支持gnome40的手势" class="headerlink" title="支持gnome40的手势"></a>支持gnome40的手势</h3><p>连上以后发现只有鼠标的点击能用，gnome手势并没有支持，虽然自带的<code>libinput</code>已经支持手势，但是gnome可能还没有实现用这个软件来控制，查看wiki后得知需要安装<code>libinput-gestures</code>，这个包是在<code>aur</code>仓库的：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">yay -S libinput-gestures</span><br><span class="line"></span><br><span class="line">libinput-gestures-setup service</span><br><span class="line">libinput-gestures-setup autostart start</span><br></pre></td></tr></table></figure><p>启动失败，查看失败的原因是权限，需要把当前用户加入到<code>input</code>这个用户组：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo usermod -aG input marlin</span><br></pre></td></tr></table></figure><p>重启电脑。因为这个软件要读取/dev下的设备文件，所以要重启。</p><p>启动以后查看：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl status libinput-gestures --user</span><br></pre></td></tr></table></figure><p>其实前面的<code>libinput-gestures-setup service</code>就是创建了一个用户的systemd服务，<code>libinput-gestures-setup start</code>就等同于<code>systemctl start libinput-gestures --user</code>，我也不知道为啥他要自定义这些命令= =</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>到手这个trackpad本来以为蓝牙连接上就能直接用了，其实买之前我也看了一篇文章，他用的fedora说是开箱即用的，没想到arch下面还是搞了好久，而且arch下面用trackpad的人好像也不太多，查资料也查了好久，不过最后还是搞定了，虽然过程曲折了一点。里面其实还有很多东西没有弄清楚，到时候有新的内容再来更新。</p><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><ul><li><p><a href="https://wiki.archlinux.org/title/Libinput_(%E7%AE%80%E4%BD%93%E4%B8%AD%E6%96%87)" target="_blank" rel="noopener">‘https://wiki.archlinux.org/title/Libinput_(%E7https://github.com/bulletmark/libinput-gestures/blob/master/README.md%AE%80%E4%BD%93%E4%B8%AD%E6%96%87)’</a></p></li><li><p><a href="https://github.com/bulletmark/libinput-gestures/blob/master/README.md" target="_blank" rel="noopener">‘https://github.com/bulletmark/libinput-gestures/blob/master/README.md’</a></p></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;因为gnome40的触摸板手势是一大特色，而且在使用macbook的时候感觉苹果的触摸板确实挺好用的，于是就是入手了一个magic trackpad2，本来想着是直接蓝牙连接的我的arch上面就可以用了，没想的并没有开箱即用，这里就记录一下配置的过程，防止以后忘记。&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="linux" scheme="http://yoursite.com/tags/linux/"/>
    
      <category term="arch" scheme="http://yoursite.com/tags/arch/"/>
    
      <category term="trackpad" scheme="http://yoursite.com/tags/trackpad/"/>
    
  </entry>
  
  <entry>
    <title>视频硬件解码</title>
    <link href="http://yoursite.com/2021/06/12/%E8%A7%86%E9%A2%91%E7%A1%AC%E4%BB%B6%E8%A7%A3%E7%A0%81/"/>
    <id>http://yoursite.com/2021/06/12/%E8%A7%86%E9%A2%91%E7%A1%AC%E4%BB%B6%E8%A7%A3%E7%A0%81/</id>
    <published>2021-06-12T14:30:07.000Z</published>
    <updated>2021-06-12T15:26:02.527Z</updated>
    
    <content type="html"><![CDATA[<p>所谓的视频硬件解码，或者叫视频硬件加速，就是用显卡来进行视频的解码和编码；相对的就是软件解码，把这部分工作交给cpu来做。用显卡的好处就是降低cpu的负载，并且能省电，因为显卡做这部分工作比cpu效率要高很多。</p><a id="more"></a><p>在看youtube 4k视频的时候，注意到一件事情就是电源的风扇在开始的时候会狂吹一阵子，非常的吵。然后cpu的负载会上升，就翻了一下arch wiki，配置了可能大家都已经很熟悉的硬件解码。</p><p>linux下面有两个开源的硬件加速api：<code>VA-API</code>和<code>VDPAU</code>。</p><h3 id="VA-API"><a href="#VA-API" class="headerlink" title="VA-API"></a>VA-API</h3><p>VA-API (Video Acceleration API) 是一套 Intel 提供的视频硬件编解码的开源库和标准。各个显卡都有对应的开源驱动，AMD的是<code>libva-mesa-driver</code>。首先安装<code>libva-utils</code>这个包，里面的<code>vainfo</code>命令可以来检查VA-API的设置：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> vainfo</span></span><br><span class="line">vainfo: VA-API version: 1.11 (libva 2.11.1)</span><br><span class="line">vainfo: Driver version: Mesa Gallium driver 21.1.2 for AMD Radeon RX 5700 XT (NAVI10, DRM 3.40.0, 5.12.9-arch1-1, LLVM 12.0.0)</span><br><span class="line">vainfo: Supported profile and entrypoints</span><br><span class="line">      VAProfileMPEG2Simple            : VAEntrypointVLD</span><br><span class="line">      VAProfileMPEG2Main              : VAEntrypointVLD</span><br><span class="line">      VAProfileVC1Simple              : VAEntrypointVLD</span><br><span class="line">      VAProfileVC1Main                : VAEntrypointVLD</span><br><span class="line">      VAProfileVC1Advanced            : VAEntrypointVLD</span><br><span class="line">      VAProfileH264ConstrainedBaseline: VAEntrypointVLD</span><br><span class="line">      VAProfileH264ConstrainedBaseline: VAEntrypointEncSlice</span><br><span class="line">      VAProfileH264Main               : VAEntrypointVLD</span><br><span class="line">      VAProfileH264Main               : VAEntrypointEncSlice</span><br><span class="line">      VAProfileH264High               : VAEntrypointVLD</span><br><span class="line">      VAProfileH264High               : VAEntrypointEncSlice</span><br><span class="line">      VAProfileHEVCMain               : VAEntrypointVLD</span><br><span class="line">      VAProfileHEVCMain               : VAEntrypointEncSlice</span><br><span class="line">      VAProfileHEVCMain10             : VAEntrypointVLD</span><br><span class="line">      VAProfileHEVCMain10             : VAEntrypointEncSlice</span><br><span class="line">      VAProfileJPEGBaseline           : VAEntrypointVLD</span><br><span class="line">      VAProfileVP9Profile0            : VAEntrypointVLD</span><br><span class="line">      VAProfileVP9Profile2            : VAEntrypointVLD</span><br><span class="line">      VAProfileNone                   : VAEntrypointVideoProc</span><br></pre></td></tr></table></figure><p>VAEntrypointVLD 指的是你的显卡能够解码这个格式，VAEntrypointEncSlice 指的是你的显卡可以编码这个格式。  </p><h3 id="VDPAU"><a href="#VDPAU" class="headerlink" title="VDPAU"></a>VDPAU</h3><p>VDPAU 是一套 Nvidia 提供的把部分视频解码和后期处理工作转移到显卡的开源库和API。<br>我暂时没配置这个。。</p><h3 id="FIREFOX"><a href="#FIREFOX" class="headerlink" title="FIREFOX"></a>FIREFOX</h3><p>火狐浏览器已经支持在wayland下面使用VA-API的硬件加速，但是要配置一下。</p><ul><li><p>启用WebRender compositor<br><code>about:config</code>设置<code>gfx.webrender.all</code>为<code>true</code>，重启浏览器。<br><code>about:support</code>下面的<code>Graphics</code>子项目<code>Descision Log</code>找到<code>WEBRENDER</code>，看是否为<code>available by user: Force enabled by pref</code>，如果是的话就是成功。</p></li><li><p>启动vaapi支持<br><code>about:config</code>下面：<br><code>media.ffmpeg.vaapi.enabled</code>为<code>true</code><br><code>media.ffvpx.enabled</code>为<code>false</code><br><code>media.rdd-vpx.enabled</code>为<code>false</code><br><code>media.navigator.mediadatadecoder_vpx_enabled</code>为<code>true</code></p></li><li><p>开启firefox的wayland支持：<br>把下面的参数添加到环境变量，<code>MOZ_ENABLE_WAYLAND=1</code>写到<code>~/.config/environment.d/firefox.conf</code>，这个目录是systemd读取的用户环境变量目录。</p></li></ul><h3 id="确认使用VA-API"><a href="#确认使用VA-API" class="headerlink" title="确认使用VA-API"></a>确认使用VA-API</h3><p>在火狐启动的时候添加环境变量<code>MOZ_LOG=&quot;PlatformDecoderModule:5&quot;</code>，查看日志里面的<code>VA-API</code>的字符串，看有没有开启就可以了。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;所谓的视频硬件解码，或者叫视频硬件加速，就是用显卡来进行视频的解码和编码；相对的就是软件解码，把这部分工作交给cpu来做。用显卡的好处就是降低cpu的负载，并且能省电，因为显卡做这部分工作比cpu效率要高很多。&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="linux" scheme="http://yoursite.com/tags/linux/"/>
    
      <category term="firefox" scheme="http://yoursite.com/tags/firefox/"/>
    
  </entry>
  
  <entry>
    <title>成为一名以太坊矿工</title>
    <link href="http://yoursite.com/2021/02/22/Become-eth-miner/"/>
    <id>http://yoursite.com/2021/02/22/Become-eth-miner/</id>
    <published>2021-02-22T14:21:35.000Z</published>
    <updated>2021-06-12T14:02:57.771Z</updated>
    
    <content type="html"><![CDATA[<p>看到群里面一个朋友开始挖矿，我也好奇心上来了，也不是想赚什么钱，只要知道显卡挖矿究竟是怎么回事就可以了。</p><a id="more"></a><h3 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h3><ul><li>eth钱包</li><li>一张好一点的amd或者nvidia的显卡（amd至少rx580，nvidia至少1060吧？如果显卡性能不好的话，收益就低一点，我用的是amd的RX5700xt）</li><li>opencl（amd）或者cuda（nvidia）驱动</li><li>linux系统（或者windows，我这里只说linux系统下的使用）</li><li>挖矿软件和矿池</li></ul><p><strong>注意：长时间运行挖矿软件会对显卡造成不可逆的损耗，请自行承担风险。（显卡不就是拿来用的吗😝 ）</strong></p><h3 id="钱包注册"><a href="#钱包注册" class="headerlink" title="钱包注册"></a>钱包注册</h3><p>eth的钱包就是一串独有的地址，交易其实就是一笔对这个地址的转账记录。所以我们只要记住我们的钱包地址就ok了。注册钱包的地方很多，我这里直接的用一个ios的app叫BRD：<br><a href="https://brd.com/" target="_blank" rel="noopener">https://brd.com/</a><br>下载然后注册，在eth的收款地址里面会发现一串类似这样的字符：  </p><p>0xbc8004340EbEedF12E0da204465a199F1A73bDe4  </p><p>这个就是钱包的地址。</p><p>当然还有其他的平台很多不同的钱包，都可以用，下面可以参考选择：</p><p><a href="https://bitcoin.org/zh_CN/choose-your-wallet" target="_blank" rel="noopener">https://bitcoin.org/zh_CN/choose-your-wallet</a></p><h3 id="显卡"><a href="#显卡" class="headerlink" title="显卡"></a>显卡</h3><p>购买一张显卡。</p><h3 id="驱动"><a href="#驱动" class="headerlink" title="驱动"></a>驱动</h3><p>我是下载<code>archlinux aur</code>仓库里面的<code>opencl-amd</code>这个软件包。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yay install opencl-amd</span><br></pre></td></tr></table></figure><blockquote><p>注aur（arch user repository）是由用户主导、用户创建的软件仓库，里面的软件基本都是用户打包发行的。</p></blockquote><h3 id="挖矿软件和矿池"><a href="#挖矿软件和矿池" class="headerlink" title="挖矿软件和矿池"></a>挖矿软件和矿池</h3><p>挖矿软件也有很多，这里选择的是一个开源的项目叫：ethminer  </p><p><a href="https://github.com/ethereum-mining/ethminer" target="_blank" rel="noopener">https://github.com/ethereum-mining/ethminer</a>  </p><p>下载下来，解压，里面有一个二进制文件就是所有了。文档里面也有用法。</p><p>矿池我选择：</p><p><a href="https://ethermine.org/" target="_blank" rel="noopener">https://ethermine.org/</a>  </p><p>就没什么特殊的理由，看着就很专业🤔</p><p>关于矿池的作用具体我也不是很清楚，大概的意思就是你用自己的计算资源通过网络连接到矿池，就可以帮忙挖矿了，当然矿池会把你的奖励返还给你。</p><p>好了，万事具备：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./ethminer -P stratum+ssl://0xbc8004340EbEedF12E0da204465a199F1A73bDe4.WORKERNAME@asia1.ethermine.org:5555</span><br></pre></td></tr></table></figure><p>将进程放入后台，要不然终端退出，进程也没了，日志也不要了：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(./ethminer -P stratum+ssl://0xbc8004340EbEedF12E0da204465a199F1A73bDe4.marlin@asia1.ethermine.org:5555 &amp;&gt; /dev/null &amp;)</span><br></pre></td></tr></table></figure><p>用了ssl加密连接，为了安全。WORKERNAME可以随便填。</p><p>呼呼呼。。。显卡终于起飞了。😈</p><p>然后你可以在他们官网查看收益，这是我的收益：</p><p><a href="https://ethermine.org/miners/bc8004340EbEedF12E0da204465a199F1A73bDe4/dashboard" target="_blank" rel="noopener">https://ethermine.org/miners/bc8004340EbEedF12E0da204465a199F1A73bDe4/dashboard</a></p><p>他们应该会七天一次将eth的奖励发送到你的钱包。</p><p>注：这显卡风扇真的吵，还能不能好好睡觉了。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;看到群里面一个朋友开始挖矿，我也好奇心上来了，也不是想赚什么钱，只要知道显卡挖矿究竟是怎么回事就可以了。&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="miner" scheme="http://yoursite.com/tags/miner/"/>
    
  </entry>
  
  <entry>
    <title>awesome窗口管理器 一</title>
    <link href="http://yoursite.com/2020/12/04/awesome%E7%AA%97%E5%8F%A3%E7%AE%A1%E7%90%86%E5%99%A8-%E4%B8%80/"/>
    <id>http://yoursite.com/2020/12/04/awesome%E7%AA%97%E5%8F%A3%E7%AE%A1%E7%90%86%E5%99%A8-%E4%B8%80/</id>
    <published>2020-12-04T13:45:37.000Z</published>
    <updated>2021-06-12T14:02:57.771Z</updated>
    
    <content type="html"><![CDATA[<p>玩玩awesome</p><a id="more"></a><h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>kde看多了感觉有点无聊于是就尝试了一下之前一直想玩的平铺式的<a href="https://en.wikipedia.org/wiki/Window_manager" target="_blank" rel="noopener">windows manager</a>,之前使用的kde其实是<a href="https://en.wikipedia.org/wiki/Desktop_environment" target="_blank" rel="noopener">desktop environment</a>，它包含了wm,当然还有还有其他的软件，比如文件浏览器，终端模拟器等等一整套东西，而wm只是管理你的窗口，其他东西需要自己装，所以相比于de,它占的资源更少。当然还有一个最重要的用wm的原因就是效率高。效率高体现在它控制窗口用的是快捷键。一般我们正常打开关闭或者最小最大化一个窗口都是鼠标点点，但是它用的是组合键。众所周知，键盘肯定是比鼠标要快的。</p><h3 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h3><h4 id="选择"><a href="#选择" class="headerlink" title="选择"></a>选择</h4><p>现在流行的平铺式的窗口管理软件大概有这么几个：i3, dwm, awesome, xmonad. 用这些软件最大的一个问题就是配置，比如xmonad配置就是用haskell这门语言写的，你如果不会。。。也没关系，大概能看懂就行了= =。既然都不会，我就随便选了一个awesome了，它的配置语言是lua，不会配置没关系，抄别人的配置就行了，我用的<a href="https://github.com/lcpz/awesome-copycats" target="_blank" rel="noopener">这个</a></p><h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><p>安装很简单， 装awesome这个软件，然后把上面那个项目的配置文件放入<code>~/.config/awesome</code>目录就ok了。它的快捷键是用的<code>ctrl</code>，<code>shift</code>，<code>super（win）</code>，<code>alt</code>这四个。</p><h4 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h4><p>首先最关键的一个快捷键：<em>super + s</em>, 显示所有快捷键的列表：<br><img src="/2020/12/04/awesome%E7%AA%97%E5%8F%A3%E7%AE%A1%E7%90%86%E5%99%A8-%E4%B8%80/shortcuts.png" alt="快捷键列表"><br>它这个就很清晰了，我这里只罗列一些我平常使用比较多的几个快捷键：</p><ul><li><p><em>super + ctrl + r</em><br>重载配置，修改了配置以后用这个命令生效。</p></li><li><p><em>super + r</em><br>运行一个程序，因为wm没有类似与kde那种dock或者启动器那样的东西，所有它运行软件都要用命令行，用这个就可以调出run prompt然后在里面键入你要运行的命令就可以了。</p></li><li><p><em>super + enter</em><br>打开终端。（需要配置自己系统上的终端。）</p></li><li><p><em>super + n(m)</em><br>最小最大化一个窗口。</p></li><li><p><em>super + ctrl + n</em><br>重新恢复最小化的窗口</p></li><li><p><em>super + shift + c</em><br>关闭一个窗口</p></li><li><p><em>super hjkl</em><br>使焦点在不同的窗口左下上右移动，用了这个感觉vim使用起来也会更好。</p></li><li><p><em>alt + shift + hl</em><br>增加和减少master窗口的宽度。<br>这里要说一下master和column的概念：master就是整个屏幕占大部分的那一块，你会在管理器的右下角明显地看出来，column就是多个小的窗口。下面一条显示的每个程序的名字，那个就是client，对应的就是一个窗口（下面说的窗口就是client，懒得截图了，大家理解一下= =。）还有如果master的client是零个的话，用这个快捷键是没用的。</p></li><li><p><em>ctrl + shift + space</em><br>在浮动窗口和平铺窗口之间切换。</p></li><li><p><em>super + space</em><br>切换窗口管理器的布局。</p></li><li><p><em>super + f</em><br>全屏</p></li><li><p><em>super + b</em><br>去掉上下的状态栏（我是这么理解= =）</p></li><li><p><em>super + shift + hl</em><br>增加和减少master的窗口数量。（对，master的client看上去只有一个其实是可以增加的，也可以为零个client）<br>还有默认运行的窗口是创建在master里面的。</p></li><li><p><em>super + ctrl + hl</em><br>增加和减少column的窗口数量。</p></li><li><p><em>super + tab</em><br>切换前一个和后一个窗口。</p></li><li><p><em>super + shift + jk</em><br>交换上下一个client和当前client的位置。</p></li></ul><p>好差不多了，平常用这些感觉已经够了，还有其他的我也不太清楚，到时候用到再去查。</p><h3 id="结尾"><a href="#结尾" class="headerlink" title="结尾"></a>结尾</h3><p>最后如果你在配置awesome的过程遇到了问题。。。我也不知道。。就google吧（其实上面很多我也是现学的= =<br>好，菜鸟awesome教程到此结束！以后如果发现更有用的会更新;)</p><p>忘了效果图了:<br><img src="/2020/12/04/awesome%E7%AA%97%E5%8F%A3%E7%AE%A1%E7%90%86%E5%99%A8-%E4%B8%80/all.png" alt="整体效果"></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;玩玩awesome&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="linux" scheme="http://yoursite.com/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>代理steam进程</title>
    <link href="http://yoursite.com/2020/10/12/%E4%BB%A3%E7%90%86steam%E8%BF%9B%E7%A8%8B/"/>
    <id>http://yoursite.com/2020/10/12/%E4%BB%A3%E7%90%86steam%E8%BF%9B%E7%A8%8B/</id>
    <published>2020-10-12T14:02:20.000Z</published>
    <updated>2021-06-12T14:02:58.151Z</updated>
    
    <content type="html"><![CDATA[<p>不能访问steam的商店和社区让我很头疼，因为steam不能设置单独的代理，而且我linux环境下用的是shadowsocks-libev,不能支持全局代理什么的。无意中看到cgroup的net_cls可以支持代理进程，只要把steam进程在net_cls里面打上标记就好。</p><a id="more"></a><h4 id="创建cgroup"><a href="#创建cgroup" class="headerlink" title="创建cgroup"></a>创建cgroup</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">sudo mkdir /sys/fs/cgroup/net_cls/steam</span><br><span class="line"></span><br><span class="line">写一个标记到文件中：</span><br><span class="line"></span><br><span class="line"><span class="built_in">cd</span> /sys/fs/cgroup/net_cls/steam</span><br><span class="line">sudo <span class="built_in">echo</span> 0x00110011 &gt; net_cls.classid</span><br><span class="line"></span><br><span class="line">这个整数可以自定义。</span><br></pre></td></tr></table></figure><h4 id="找到steam的进程"><a href="#找到steam的进程" class="headerlink" title="找到steam的进程"></a>找到steam的进程</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pgrep steam</span><br></pre></td></tr></table></figure><h4 id="将进程id写入cgroup-procs"><a href="#将进程id写入cgroup-procs" class="headerlink" title="将进程id写入cgroup.procs"></a>将进程id写入cgroup.procs</h4><p>关于进程id写入cgroup.procs还是task,这部分内容涉及到linux的进程和线程的东西，可以看<a href="https://en.wikipedia.org/wiki/Light-weight_process" target="_blank" rel="noopener">这里</a>.</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pgrep steam  | awk <span class="string">'&#123;system("echo "$0" | sudo tee /sys/fs/cgroup/net_cls/steam/cgroup.procs")&#125;'</span></span><br></pre></td></tr></table></figure><p>我这里用了awk的system函数是因为默认<code>pgrep</code>出来的多个结果后面会带一个回车导致不能直接写入<code>cgroup.procs</code>文件，用<code>system</code>函数就相当于每行都执行一次<code>echo &lt;pid&gt; | sudo tee</code>.</p><h4 id="加一条iptables规则"><a href="#加一条iptables规则" class="headerlink" title="加一条iptables规则"></a>加一条iptables规则</h4><p>还需要把前面cgroup标记的steam流量转发到ss-redir，ss-redir是shadowsocks-libev用来做透明代理的一个组件，具体请看<a href="https://manpages.debian.org/testing/shadowsocks-libev/ss-redir.1.en.html" target="_blank" rel="noopener">这里</a>. 这个文档里面还包含了配置一个完整的透明代理的所有步骤。</p><p>只要用iptables将出去的流量重定向到ss-redir监听的端口就可以了。(ss-redir的配置和ss-local是一样的。)：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo iptables -t nat -A OUTPUT -p tcp  -m cgroup --cgroup 0x00110011 -j REDIRECT --to-ports 10801</span><br></pre></td></tr></table></figure><p>–cgroup就是我们前面做的标记。</p><p>完成。刷新一下</p><p>还有一个问题就是开启steam要手动执行把进程id写入cgroup.procs文件的步骤，因为重启steam进程的id都是会变的，所以还是有点麻烦。关于cgroup和linux进程还有很多的不懂的地方，请大家多多指教！</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;不能访问steam的商店和社区让我很头疼，因为steam不能设置单独的代理，而且我linux环境下用的是shadowsocks-libev,不能支持全局代理什么的。无意中看到cgroup的net_cls可以支持代理进程，只要把steam进程在net_cls里面打上标记就好。&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="linux" scheme="http://yoursite.com/tags/linux/"/>
    
      <category term="game" scheme="http://yoursite.com/tags/game/"/>
    
  </entry>
  
  <entry>
    <title>linux游戏不完全指南</title>
    <link href="http://yoursite.com/2020/10/06/linux%E6%B8%B8%E6%88%8F%E6%8C%87%E5%8D%97/"/>
    <id>http://yoursite.com/2020/10/06/linux%E6%B8%B8%E6%88%8F%E6%8C%87%E5%8D%97/</id>
    <published>2020-10-06T06:00:49.000Z</published>
    <updated>2021-06-12T14:02:58.137Z</updated>
    
    <content type="html"><![CDATA[<p>这篇文章主要记录一下在linux下面玩游戏的一些操作及注意的事项，以便之后快速的回顾，我会尽可能把一些细节描述清楚，也能提供其他人在linux玩windows游戏的帮助。</p><a id="more"></a><p>首先说明一下我的硬件配置:<br><img src="/2020/10/06/linux%E6%B8%B8%E6%88%8F%E6%8C%87%E5%8D%97/sys.png" alt="我的系统配置"><br>众所周知，nvidia的显卡驱动对于linux来说是一个大坑，由于我的显卡是amd的，所以可能会比较方便一点，至少到目前为止，我没有遇到显卡驱动方面的坑，但是并不是说nvidia的显卡就不能在linux下面玩游戏了，听说现在装驱动也很方便了，但是我这里就不具体说明了。默认大家都已经装好显卡驱动。</p><h3 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h3><h4 id="安装linux版steam"><a href="#安装linux版steam" class="headerlink" title="安装linux版steam"></a>安装linux版steam</h4><p>这个应该很简单，各大发行版的包管理应该都能直接安装，这里用arch来说明:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo pacman -S steam</span><br></pre></td></tr></table></figure><p>直接一条命令。</p><h4 id="安装lutris"><a href="#安装lutris" class="headerlink" title="安装lutris"></a>安装lutris</h4><p>lutris的具体介绍可能看他们的<a href="https://lutris.net/" target="_blank" rel="noopener">官网</a>，如果你玩steam的游戏可能不需要它，但是如果你要玩其他游戏平台的游戏比如炉石就需要它：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo pacman -S lutirs</span><br></pre></td></tr></table></figure><p>安装炉石：<br><img src="/2020/10/06/linux%E6%B8%B8%E6%88%8F%E6%8C%87%E5%8D%97/heartstone.png" alt="安装界面"><br><a href="https://lutris.net/games/hearthstone/" target="_blank" rel="noopener">地址</a></p><p>安装的时候可能需要安装其他的一些依赖，比如wine什么的，它可能会提示你有一些依赖没有安装，按照它的步骤来就可以了，如果有依赖没有安装可以参考下面的步骤：<br><a href="https://github.com/lutris/docs/blob/master/WineDependencies.md" target="_blank" rel="noopener">安装wine依赖</a></p><h4 id="关于wine"><a href="#关于wine" class="headerlink" title="关于wine"></a>关于wine</h4><p>通俗一点的说，wine就是一个让你在linux下面运行windows软件的一个转换器，所以其实lutris就是把wine封装了一下，如果你不用lutris也可以直接用wine运行windows的游戏，但是这样可能就没有直接用lutris方便，毕竟它集成了一些脚本什么的。</p><h4 id="关于proton"><a href="#关于proton" class="headerlink" title="关于proton"></a>关于proton</h4><p>proton其实也是一个wine的封装，不过它是valve推出的一个在steam运行windows游戏的工具，可以在steam的设置中启用它：<br><img src="/2020/10/06/linux%E6%B8%B8%E6%88%8F%E6%8C%87%E5%8D%97/proton.png" alt="proton设置"><br>开启这个设置重启就可以下载非linux原生支持的游戏了。</p><p>安装完这些其实就已经基本上可以运行游戏了，下面是一些优化。</p><h4 id="启用Esync"><a href="#启用Esync" class="headerlink" title="启用Esync"></a>启用Esync</h4><p>启用这个设置可以提高一些依赖cpu的游戏的性能。<br>查看系统是否已经开启Esync:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">ulimit</span> -Hn</span><br></pre></td></tr></table></figure><p>如果输出的值大于等于524288,那么已经可以用了，在lutris的wine设置里面可以直接启用：<br><img src="/2020/10/06/linux%E6%B8%B8%E6%88%8F%E6%8C%87%E5%8D%97/esync.png" alt="设置界面"><br>如果你输出的值小于524288,那么可以按照下面的说明来操作：<br><a href="https://github.com/lutris/docs/blob/master/HowToEsync.md" target="_blank" rel="noopener">https://github.com/lutris/docs/blob/master/HowToEsync.md</a></p><h4 id="gamemode"><a href="#gamemode" class="headerlink" title="gamemode"></a>gamemode</h4><p>GameMode是Linux的守护程序/库组合，它允许游戏请求将一组优化暂时应用到主机OS和/或游戏进程。<br>具体可以看github介绍：<br><a href="https://github.com/FeralInteractive/gamemode" target="_blank" rel="noopener">https://github.com/FeralInteractive/gamemode</a><br>arch linux的话直接装就可以了:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo pacman -S gamemode lib32-gamemode</span><br></pre></td></tr></table></figure><p>在lutris里面开启：<br><img src="/2020/10/06/linux%E6%B8%B8%E6%88%8F%E6%8C%87%E5%8D%97/gamemode.png" alt="lutris配置"></p><p>在steam里面开启：<br>配置游戏的启动参数：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gamemoderun %<span class="built_in">command</span>%</span><br></pre></td></tr></table></figure><h4 id="custom-proton"><a href="#custom-proton" class="headerlink" title="custom proton"></a>custom proton</h4><p>这是proton的一个分支，它在proton的基础上又加了一些自定义的配置，某些游戏用它运行可以提升很多性能，至少在我这里运行黑魂3，用默认的proton 5.0-9帧数只有30多，用了custom proton可以提高到40多帧，差不多是30%的性能了。如果用中画质的话就可以流畅运行了, 但是某些游戏性能提升可能就没有那么明显，具体可以到<a href="https://www.protondb.com/" target="_blank" rel="noopener">protondb</a>查看各个游戏的情况。  </p><p>下面是custom protom的项目地址：<br><a href="https://github.com/GloriousEggroll/proton-ge-custom" target="_blank" rel="noopener">https://github.com/GloriousEggroll/proton-ge-custom</a>  </p><p>如果是arch的话安装就很方便：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yay -Ss proton-ge-custom</span><br></pre></td></tr></table></figure><p>其他的发行版安装可能就比较麻烦，要自己编译安装了。</p><p>装archcn的包：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudp pacman -S proton-ge-custom-stable-bin</span><br></pre></td></tr></table></figure><p>装完以后可能要注销重新登陆一下电脑。  </p><p>然后在steam的游戏设置里面启用custom proton:<br><img src="/2020/10/06/linux%E6%B8%B8%E6%88%8F%E6%8C%87%E5%8D%97/steamcustomproton.png" alt="steam游戏设置"><br>在最下面选择，保存设置就可以了。</p><h4 id="启用ACO-compiler"><a href="#启用ACO-compiler" class="headerlink" title="启用ACO compiler"></a>启用ACO compiler</h4><p>这个只支持amd的显卡。<br>ACO compiler是一个由valve开发的开源着色编译器，想较于其他的有更好的性能优势，具体可以看<a href="https://itsfoss.com/linux-games-performance-boost-amd-gpu/" target="_blank" rel="noopener">这篇文章</a><br>由于我安装的是mesa-20.1.8-1,ACO compiler默认可用，但是没有开启，所以需要手动开启：<br>在lutris里面：<br>perferences -&gt; system options<br><img src="/2020/10/06/linux%E6%B8%B8%E6%88%8F%E6%8C%87%E5%8D%97/aoc.png" alt="设置"></p><p>在steam里面：<br>单个游戏的配置里面添加启动参数：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">RADV_PERFTEST=aco %<span class="built_in">command</span>%</span><br></pre></td></tr></table></figure><p><img src="/2020/10/06/linux%E6%B8%B8%E6%88%8F%E6%8C%87%E5%8D%97/option.png" alt="配置"></p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>以上差不多就是我试过的所有关于linux玩windows游戏的所有了。以上的配置也不是说启用了就一定能提高游戏的性能表现，只是一个参考，如果启用了某一项出了问题，完全可以关闭那个配置，或者关闭了那个配置，游戏可能更流畅， = = 。</p><p>还有如果安装什么的过程中遇到了问题，可以先google一下，因为你遇到的坑，也许别人早就踩过了。</p><p>linux玩游戏就折腾得差不多了，可能还有一些优化的地方，如果遇到以后再来更新了；最后我发现，折腾这东西果然比玩游戏本身有意思多了，而且这篇文章一点都不详细啊。 -_-</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;这篇文章主要记录一下在linux下面玩游戏的一些操作及注意的事项，以便之后快速的回顾，我会尽可能把一些细节描述清楚，也能提供其他人在linux玩windows游戏的帮助。&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="linux" scheme="http://yoursite.com/tags/linux/"/>
    
      <category term="game" scheme="http://yoursite.com/tags/game/"/>
    
  </entry>
  
  <entry>
    <title>xbox 无线手柄连接linux</title>
    <link href="http://yoursite.com/2020/10/05/xbox-%E6%97%A0%E7%BA%BF%E6%89%8B%E6%9F%84%E8%BF%9E%E6%8E%A5linux/"/>
    <id>http://yoursite.com/2020/10/05/xbox-%E6%97%A0%E7%BA%BF%E6%89%8B%E6%9F%84%E8%BF%9E%E6%8E%A5linux/</id>
    <published>2020-10-05T05:26:07.000Z</published>
    <updated>2021-06-12T14:02:58.147Z</updated>
    
    <content type="html"><![CDATA[<p>xbox的无线手柄连接linux的蓝牙的时候，会有一个小问题。</p><a id="more"></a><p>因为linux的蓝牙默认是启用的ertm模式，在这个模式下，xbox的手柄是连接不了的，所以有一个解决办法是关闭这个模式：</p><h3 id="第一个方法"><a href="#第一个方法" class="headerlink" title="第一个方法"></a>第一个方法</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo <span class="built_in">echo</span> 1 &gt; /sys/module/bluetooth/parameters/disable_ertm</span><br></pre></td></tr></table></figure><p>然后重启蓝牙：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl restart bluebooh</span><br></pre></td></tr></table></figure><p>但是这个办法电脑重启以后就会失效，每次连接都要来一遍就有点麻烦。</p><h3 id="第二个方法"><a href="#第二个方法" class="headerlink" title="第二个方法"></a>第二个方法</h3><p>还有一个一劳永逸的办法就是安装一个第三方的xbox手柄驱动:<br><a href="https://github.com/atar-axis/xpadneo" target="_blank" rel="noopener">github</a></p><h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">arch linux：</span><br><span class="line"></span><br><span class="line">sudo pacman -S dkms linux-headers bluez bluez-utils</span><br><span class="line"></span><br><span class="line">git <span class="built_in">clone</span> https://github.com/atar-axis/xpadneo.git</span><br><span class="line"></span><br><span class="line"><span class="built_in">cd</span> xpadneo</span><br><span class="line">sudo ./install.sh</span><br></pre></td></tr></table></figure><p>装完以后重启配对蓝牙就ok了。可以发现，这个项目还提供了一些手柄的高级操作，有一些甚至在windows下面都不支持。</p><h4 id="10月18更新"><a href="#10月18更新" class="headerlink" title="10月18更新"></a>10月18更新</h4><p>今天打开steam想用手柄玩会游戏，突然发现手柄不能用了，，之前连上手柄会有轻微的一点震动，现在连上什么反应也没有了，进游戏按键什么的毫无反应。<br>猜测是系统更新的问题，我就查看了之前装的关于无线蓝牙的驱动和工具：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo pacman -Qs bule</span><br></pre></td></tr></table></figure><p>发现最近的更新是在9月，那时候我都已经在用这个手柄玩游戏之前了，所以不是这个。</p><p>然后我怀疑是手柄的驱动是不是更新了，于是到项目的github发现也没有，最后我尝试重新安装手柄驱动：</p><p><img src="/2020/10/05/xbox-%E6%97%A0%E7%BA%BF%E6%89%8B%E6%9F%84%E8%BF%9E%E6%8E%A5linux/uninstall.png" alt="uninstall"></p><p>原来这个模块没有加载啊，怪不得。但是为什么没有加载呢？</p><p>我先没有管，直接重新安装了：</p><p><img src="/2020/10/05/xbox-%E6%97%A0%E7%BA%BF%E6%89%8B%E6%9F%84%E8%BF%9E%E6%8E%A5linux/install.png" alt="install"></p><p>竟然失败了，提示文件不存在！我可没有删除过任何这个目录下的文件啊，查看了文件目录确实没有文件，于是我看了一下install.sh的脚本：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/bin/bash -e</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># shellcheck disable=SC1090</span></span><br><span class="line"><span class="built_in">source</span> <span class="string">"<span class="variable">$(dirname "$0")</span>/lib/installer.sh"</span></span><br><span class="line"></span><br><span class="line">DESTDIR=<span class="string">"/usr/src/hid-xpadneo-<span class="variable">$&#123;VERSION&#125;</span>"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [[ -z <span class="string">"<span class="variable">$INSTALLED</span>"</span> ]]; <span class="keyword">then</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"* copying module to '<span class="variable">$&#123;DESTDIR&#125;</span>'"</span></span><br><span class="line">    cp --recursive <span class="string">"hid-xpadneo"</span> <span class="string">"<span class="variable">$&#123;DESTDIR&#125;</span>"</span></span><br><span class="line"></span><br><span class="line">        <span class="built_in">echo</span> <span class="string">"* replacing version string if necessary"</span></span><br><span class="line">        (</span><br><span class="line">                <span class="built_in">cd</span> <span class="string">"<span class="variable">$&#123;DESTDIR&#125;</span>"</span></span><br><span class="line">                sed -i <span class="string">'s/"@DO_NOT_CHANGE@"/"'</span><span class="string">"<span class="variable">$&#123;VERSION&#125;</span>"</span><span class="string">'"/g'</span> dkms.conf src/hid-xpadneo.c</span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"* adding module to DKMS"</span></span><br><span class="line">    dkms add <span class="string">"hid-xpadneo/<span class="variable">$&#123;VERSION&#125;</span>"</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"* installing module (using DKMS)"</span></span><br><span class="line">    dkms install <span class="string">"hid-xpadneo/<span class="variable">$&#123;VERSION&#125;</span>"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"already installed!"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure><p>脚本很短，先是source了一个installer, 然后看一下<code>INSTALLED</code>这个变量为不为空，为空的话就执行安装的步骤。</p><p>再看一下那个installer文件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [ <span class="variable">$&#123;EUID&#125;</span> -ne 0 ]; <span class="keyword">then</span></span><br><span class="line">        <span class="built_in">echo</span> &gt;&amp;2 <span class="string">"ERROR: You most probably need superuser privileges to use this script, please run me via sudo!"</span></span><br><span class="line">        <span class="built_in">exit</span> 3</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># shellcheck disable=SC2034</span></span><br><span class="line">GIT_ROOT=$(git rev-parse --show-toplevel 2&gt;/dev/null || <span class="literal">true</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">__version</span></span>() &#123;</span><br><span class="line">        git describe --tags --dirty 2&gt;/dev/null || sed -re<span class="string">'s/v?(.*)/v\1/'</span> <span class="string">"<span class="variable">$(dirname "$&#123;BASH_SOURCE[0]&#125;")</span>/../VERSION"</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">__version_lte</span></span>() &#123;</span><br><span class="line">    [  <span class="string">"<span class="variable">$1</span>"</span> = <span class="string">"<span class="variable">$(echo -e "$1\n$&#123;2/-/.9999-&#125;" | sort -V | head -n1)</span>"</span> ]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># shellcheck disable=SC2034</span></span><br><span class="line">VERSION=$(__version)</span><br><span class="line"></span><br><span class="line">DKMS_BIN=$(<span class="built_in">type</span> -p dkms)</span><br><span class="line"></span><br><span class="line"><span class="comment"># shellcheck disable=SC2086</span></span><br><span class="line">: <span class="variable">$&#123;DKMS_BIN:?Please install dkms to continue&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">get_dkms_versions_installed</span></span>() &#123;</span><br><span class="line">        <span class="variable">$&#123;DKMS_BIN&#125;</span> status | tr -s <span class="string">':, '</span> <span class="string">' '</span> | awk -- <span class="string">'$1 == "hid-xpadneo" &#123; print $2 &#125;'</span> | sort -nu</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">get_upstream_version_latest</span></span>() &#123;</span><br><span class="line">        curl -sI <span class="string">"https://github.com/atar-axis/xpadneo/releases/latest"</span> | \</span><br><span class="line">        awk -- <span class="string">'BEGIN&#123;IGNORECASE=1&#125; /^location:/ &#123; n = split($2, v, /\//); print v[n]; exit &#125;'</span> | \</span><br><span class="line">        tr -d <span class="string">'[:space:]'</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># shellcheck disable=SC2034</span></span><br><span class="line">INSTALLED=(</span><br><span class="line">        $(get_dkms_versions_installed)</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>发现是<code>get_dkms_version_installed</code>这个函数获取安装版本号：根据<code>dkms status</code>的结果提取出版本号，执行了也发现也没啥问题啊。</p><p>查看一下dkms究竟是什么：<br><a href="https://wiki.archlinux.org/index.php/Dynamic_Kernel_Module_Support" target="_blank" rel="noopener">arch wiki about DKMS</a><br>动态内核模块支持(DKMS) 是一个程序框架，可以编译内核代码树之外的模块。0.0 咱不懂啊。但是我看了它几个命令好像也不难。。</p><p>问题还是没找到啊，于是我又去错误提示的那个目录看一下究竟少了什么文件：<br><img src="/2020/10/05/xbox-%E6%97%A0%E7%BA%BF%E6%89%8B%E6%9F%84%E8%BF%9E%E6%8E%A5linux/kernel.png" alt="ls"><br>一看版本好像和我的内核版本不太一样啊！（后面那个5.8.14是我新加的）<br>看来是更新内核的原因啊，于是我重新生成了一份文件：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dkms install -m hid-xpadneo -v v0.8-29-gd55e6d4</span><br></pre></td></tr></table></figure><p>然后重新加载内核模块：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo modprobe hid_xpadneo</span><br><span class="line">lsmod | grep hid_xpadneo</span><br></pre></td></tr></table></figure><p>重新连接xbox手柄，成功！</p><p>虽然写得很短，但是这个问题排查真的花了我一个多小时啊，搞完以后游戏也不想玩了。 关键是内核更新了，这个模块竟然没有更新。。arch wiki里面明明写了：</p><blockquote><p>升级内核时，通过 DKMS 管理的内核模块可以被自动重新构建以适应新的内核版本。</p></blockquote><p>问了别人说是内核如果有api break change的时候DKMS是不会自动帮你更新模块的。内核什么的已经超出我的能力范围了 = =。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;xbox的无线手柄连接linux的蓝牙的时候，会有一个小问题。&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="linux" scheme="http://yoursite.com/tags/linux/"/>
    
      <category term="game" scheme="http://yoursite.com/tags/game/"/>
    
  </entry>
  
  <entry>
    <title>函数装饰器和闭包</title>
    <link href="http://yoursite.com/2020/06/01/%E5%87%BD%E6%95%B0%E8%A3%85%E9%A5%B0%E5%99%A8%E5%92%8C%E9%97%AD%E5%8C%85/"/>
    <id>http://yoursite.com/2020/06/01/%E5%87%BD%E6%95%B0%E8%A3%85%E9%A5%B0%E5%99%A8%E5%92%8C%E9%97%AD%E5%8C%85/</id>
    <published>2020-06-01T14:27:58.000Z</published>
    <updated>2021-06-12T14:02:58.151Z</updated>
    
    <content type="html"><![CDATA[<p>装饰器的一大特性是,能把被装饰的函数替换成其他函数。第二个特性是,装饰器在加载模块时立即执行。</p><a id="more"></a><p>下面是第一个特性：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">deco</span><span class="params">(func)</span>:</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">inner</span><span class="params">()</span>:</span></span><br><span class="line">print(<span class="string">'running inner()'</span>)</span><br><span class="line"><span class="keyword">return</span> inner</span><br><span class="line"></span><br><span class="line"><span class="meta">@deco</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">target</span><span class="params">()</span>:</span></span><br><span class="line">print(<span class="string">'running target()'</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>target()</span><br><span class="line">running inner()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>target</span><br><span class="line">&lt;function deco.&lt;locals&gt;.inner at <span class="number">0x10063b598</span>&gt;</span><br></pre></td></tr></table></figure><p>被装饰的target现在是inner的引用。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">registry = []</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">register</span><span class="params">(func)</span>:</span></span><br><span class="line">print(<span class="string">'running register(%s)'</span> % func)</span><br><span class="line">registry.append(func)</span><br><span class="line"><span class="keyword">return</span> func</span><br><span class="line"></span><br><span class="line"><span class="meta">@register</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f1</span><span class="params">()</span>:</span></span><br><span class="line">print(<span class="string">'runningf1()'</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">@register</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f2</span><span class="params">()</span>:</span></span><br><span class="line">print(<span class="string">'runningf2()'</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f3</span><span class="params">()</span>:</span></span><br><span class="line">print(<span class="string">'running f3()'</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">print(<span class="string">'running main()'</span>)</span><br><span class="line">print(<span class="string">'registry -&gt;'</span>, registry)</span><br><span class="line">f1()</span><br><span class="line">f2()</span><br><span class="line">f3()</span><br><span class="line"></span><br><span class="line">if__name__==<span class="string">'__main__'</span>:</span><br><span class="line">main()</span><br></pre></td></tr></table></figure><p>运行：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">python3 registration.py</span><br><span class="line">running register(&lt;function f1 at <span class="number">0x100631bf8</span>&gt;)</span><br><span class="line">running register(&lt;function f2 at <span class="number">0x100631c80</span>&gt;)</span><br><span class="line">running main()</span><br><span class="line">registry -&gt; [&lt;function f1 at 0x100631bf8&gt;, &lt;function f2 at 0x100631c80&gt;]</span><br><span class="line">running f1()</span><br><span class="line">running f2()</span><br><span class="line">running f3()</span><br></pre></td></tr></table></figure><p>如果直接导入：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> registration</span><br><span class="line">running register(&lt;function f1 at <span class="number">0x10063b1e0</span>&gt;)</span><br><span class="line">running register(&lt;function f2 at <span class="number">0x10063b268</span>&gt;)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>registration.registry</span><br><span class="line">[&lt;function f1 at <span class="number">0x10063b1e0</span>&gt;, &lt;function f2 at <span class="number">0x10063b268</span>&gt;]</span><br></pre></td></tr></table></figure><p>函数装饰器在导入模块时立即执行,而被装饰的函数只在明确调用时运行。这突出了 Python 程序员所说的导入时和运行时之间的区别。</p><h4 id="使用装饰器改进“策略”模式"><a href="#使用装饰器改进“策略”模式" class="headerlink" title="使用装饰器改进“策略”模式"></a>使用装饰器改进“策略”模式</h4><p>之前的模式的主要问题是,定义体中有函数的名称,但是best_promo 用来判断哪个折扣幅度最大的 promos 列表中也有函数名称。这种重复是个问题,因为新增策略函数后可能会忘记把它添加到promos 列表中,导致 best_promo 忽略新策略,而且不报错,为系统引入了不易察觉的缺陷。<br>下面是用装饰器实现：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">promos = []</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">promotion</span><span class="params">(promo_func)</span>:</span>  <span class="comment"># promotion 把 promo_func 添加到 promos 列表中,然后原封不动地将其返回。</span></span><br><span class="line">    promos.append(promo_func)</span><br><span class="line">    <span class="keyword">return</span> promo_func</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@promotion           # 被 @promotion 装饰的函数都会添加到 promos 列表中。</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fidelity</span><span class="params">(order)</span>:</span></span><br><span class="line">    <span class="string">"""为积分为1000或以上的顾客提供5%折扣"""</span></span><br><span class="line">    <span class="keyword">return</span> order.total() * <span class="number">.05</span> <span class="keyword">if</span> order.customer.fidelity &gt;= <span class="number">1000</span> <span class="keyword">else</span> <span class="number">0</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@promotion</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">bulk_item</span><span class="params">(order)</span>:</span></span><br><span class="line">    <span class="string">"""单个商品为20个或以上时提供10%折扣"""</span></span><br><span class="line">    discount = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> item <span class="keyword">in</span> order.cart:</span><br><span class="line">        <span class="keyword">if</span> item.quantity &gt;= <span class="number">20</span>:</span><br><span class="line">            discount += item.total() * <span class="number">.1</span></span><br><span class="line">    <span class="keyword">return</span> discount</span><br><span class="line"></span><br><span class="line"><span class="meta">@promotion</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">large_order</span><span class="params">(order)</span>:</span></span><br><span class="line">    <span class="string">"""订单中的不同商品达到10个或以上时提供7%折扣"""</span></span><br><span class="line">    distinct_items = &#123;item.product <span class="keyword">for</span> item <span class="keyword">in</span> order.cart&#125;</span><br><span class="line">    <span class="keyword">if</span> len(distinct_items) &gt;= <span class="number">10</span>:</span><br><span class="line">        <span class="keyword">return</span> order.total() * <span class="number">.07</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">best_promo</span><span class="params">(order)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> max(promo(order) <span class="keyword">for</span> promo <span class="keyword">in</span> promos)</span><br></pre></td></tr></table></figure><p>这个方案有几个优点。</p><ul><li>促销策略函数无需使用特殊的名称(即不用以 _promo 结尾)。</li><li>@promotion 装饰器突出了被装饰的函数的作用,还便于临时禁用某个促销策略:只需把装饰器注释掉。</li><li>促销折扣策略可以在其他模块中定义,在系统中的任何地方都行,只要使用 @promotion 装饰即可。</li></ul><h3 id="变量作用域规则"><a href="#变量作用域规则" class="headerlink" title="变量作用域规则"></a>变量作用域规则</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>b = <span class="number">6</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="function"><span class="keyword">def</span> <span class="title">f2</span><span class="params">(a)</span>:</span></span><br><span class="line"><span class="meta">... </span>print(a)</span><br><span class="line"><span class="meta">... </span>print(b)</span><br><span class="line"><span class="meta">... </span>b = <span class="number">9</span></span><br><span class="line">...</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>f2(<span class="number">3</span>)</span><br><span class="line"><span class="number">3</span></span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">File <span class="string">"&lt;stdin&gt;"</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">File <span class="string">"&lt;stdin&gt;"</span>, line <span class="number">3</span>, <span class="keyword">in</span> f2</span><br><span class="line">UnboundLocalError: local variable <span class="string">'b'</span> referenced before assignment</span><br></pre></td></tr></table></figure><p>事实是,Python 编译函数的定义体时,它判断 b 是局部变量,因为在函数中给它赋值了。生成的字节码证实了这种判断,Python 会尝试从本地环境获取 b。后面调用 f2(3) 时, f2 的定义体会获取并打印局部变量 a 的值,但是尝试获取局部变量 b 的值时,发现 b 没有绑定值。</p><blockquote><p>Python不要求声明变量,但是假定在函数定义体中赋值的变量是局部变量。</p></blockquote><p>如果在函数中赋值时想让解释器把 b 当成全局变量,要使用 global 声明:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">8</span>]: b = <span class="number">6</span></span><br><span class="line">In [<span class="number">9</span>]: <span class="function"><span class="keyword">def</span> <span class="title">f3</span><span class="params">(a)</span>:</span></span><br><span class="line">   ...:     <span class="keyword">global</span> b</span><br><span class="line">   ...:     print(a)</span><br><span class="line">   ...:     print(b)</span><br><span class="line">   ...:     b = <span class="number">9</span></span><br><span class="line">In [<span class="number">10</span>]: f3(<span class="number">3</span>)</span><br><span class="line"><span class="number">3</span></span><br><span class="line"><span class="number">6</span></span><br><span class="line">In [<span class="number">11</span>]: b</span><br><span class="line">Out[<span class="number">11</span>]: <span class="number">9</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">12</span>]: f3(<span class="number">3</span>)</span><br><span class="line"><span class="number">3</span></span><br><span class="line"><span class="number">9</span></span><br></pre></td></tr></table></figure><h3 id="闭包"><a href="#闭包" class="headerlink" title="闭包"></a>闭包</h3><p>闭包指延伸了作用域的函数,其中包含函数定义体中引用、但是不在定义体中定义的非全局变量。函数是不是匿名的没有关系,关键是它能访问定义体之外定义的非全局变量。</p><p>看下面的示例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Average</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.series = []</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__call__</span><span class="params">(self, new_value)</span>:</span></span><br><span class="line">        self.series.append(new_value)</span><br><span class="line">        total = sum(self.series)</span><br><span class="line">        <span class="keyword">return</span> total / len(self.series)</span><br></pre></td></tr></table></figure><p>使用：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>avg = Averager()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>avg(<span class="number">10</span>)</span><br><span class="line"><span class="number">10.0</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>avg(<span class="number">11</span>)</span><br><span class="line"><span class="number">10.5</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>avg(<span class="number">12</span>)</span><br><span class="line"><span class="number">11.0</span></span><br></pre></td></tr></table></figure><p>或者可以用函数实现：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">make_averager</span><span class="params">()</span>:</span>   </span><br><span class="line">    series = []  <span class="comment"># 自由变量。             #</span></span><br><span class="line">                                        <span class="comment">#    </span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">averager</span><span class="params">(new_value)</span>:</span>            <span class="comment">#</span></span><br><span class="line">        series.append(new_value)        <span class="comment"># 这一块就是闭包</span></span><br><span class="line">        total = sum(series)             <span class="comment">#</span></span><br><span class="line">        <span class="keyword">return</span> total / len(series)      <span class="comment"># </span></span><br><span class="line">        </span><br><span class="line">    <span class="keyword">return</span> averager</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>avg = make_averager()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>avg(<span class="number">10</span>)</span><br><span class="line"><span class="number">10.0</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>avg(<span class="number">11</span>)</span><br><span class="line"><span class="number">10.5</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>avg(<span class="number">12</span>)</span><br><span class="line"><span class="number">11.0</span></span><br></pre></td></tr></table></figure><p>这两个示例有共通之处:调用 Averager() 或make_averager() 得到一个可调用对象 avg,它会更新历史值,然后计算当前均值。</p><p>在 averager 函数中,series 是自由变量(free variable)。<br>averager 的闭包延伸到那个函数的作用域之外,包含自由变量 series 的绑定。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>avg.__code__.co_varnames</span><br><span class="line">(<span class="string">'new_value'</span>, <span class="string">'total'</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>avg.__code__.co_freevars</span><br><span class="line">(<span class="string">'series'</span>,)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>avg.__code__.co_freevars</span><br><span class="line">(<span class="string">'series'</span>,)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>avg.__closure__</span><br><span class="line">(&lt;cell at <span class="number">0x107a44f78</span>: list object at <span class="number">0x107a91a48</span>&gt;,)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>avg.__closure__[<span class="number">0</span>].cell_contents</span><br><span class="line">[<span class="number">10</span>, <span class="number">11</span>, <span class="number">12</span>]</span><br></pre></td></tr></table></figure><blockquote><p>综上,闭包是一种函数,它会保留定义函数时存在的自由变量的绑定,这样调用函数时,虽然定义作用域不可用了,但是仍能使用那些绑定。</p></blockquote><h3 id="nolocal声明"><a href="#nolocal声明" class="headerlink" title="nolocal声明"></a>nolocal声明</h3><p>下面用另一种方式实现上面的make_averager():</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">make_averager</span><span class="params">()</span>:</span></span><br><span class="line">    count = <span class="number">0</span></span><br><span class="line">    total = <span class="number">0</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">averager</span><span class="params">(new_value)</span>:</span></span><br><span class="line">        count += <span class="number">1</span></span><br><span class="line">        total += new_value</span><br><span class="line">        <span class="keyword">return</span> total / count</span><br><span class="line">    <span class="keyword">return</span> averager</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>avg = make_averager()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>avg(<span class="number">10</span>)</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">...</span><br><span class="line">UnboundLocalError: local variable <span class="string">'count'</span> referenced before assignment</span><br><span class="line">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure><p>问题是,当 count 是数字或任何不可变类型时,count += 1 语句的作用其实与 <code>count = count + 1</code> 一样。因此,我们在 averager 的定义体中为 count 赋值了,这会把 count 变成局部变量。total 变量也受这个问题影响。</p><p>为了解决这个问题,Python 3 引入了 nonlocal 声明。它的作用是把变量标记为自由变量,即使在函数中为变量赋予新值了,也会变成自由变量。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">make_averager</span><span class="params">()</span>:</span></span><br><span class="line">    count = <span class="number">0</span></span><br><span class="line">    total = <span class="number">0</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">averager</span><span class="params">(new_value)</span>:</span></span><br><span class="line">        <span class="keyword">nonlocal</span> count, total</span><br><span class="line">        count += <span class="number">1</span></span><br><span class="line">        total += new_value</span><br><span class="line">        <span class="keyword">return</span> total / count</span><br><span class="line">    <span class="keyword">return</span> averager</span><br></pre></td></tr></table></figure><h3 id="实现一个简单的装饰器"><a href="#实现一个简单的装饰器" class="headerlink" title="实现一个简单的装饰器"></a>实现一个简单的装饰器</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">clock</span><span class="params">(func)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">clocked</span><span class="params">(*args)</span>:</span>  <span class="comment"># 定义内部函数 clocked,它接受任意个定位参数。</span></span><br><span class="line">        t0 = time.perf_counter()</span><br><span class="line">        result = func(*args)  <span class="comment"># 这行代码可用,是因为 clocked 的闭包中包含自由变量 func。</span></span><br><span class="line">        elapsed = time.perf_counter() - t0</span><br><span class="line">        name = func.__name__</span><br><span class="line">        arg_str = <span class="string">', '</span>.join(repr(arg) <span class="keyword">for</span> arg <span class="keyword">in</span> args)</span><br><span class="line">        print(<span class="string">'[%0.8fs] %s(%s) -&gt; %r'</span> % (elapsed, name, arg_str, result))</span><br><span class="line">        <span class="keyword">return</span> result</span><br><span class="line">    <span class="keyword">return</span> clocked     <span class="comment"># 返回内部函数,取代被装饰的函数。</span></span><br></pre></td></tr></table></figure><p>使用：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">from</span> clockdeco <span class="keyword">import</span> clock</span><br><span class="line"></span><br><span class="line"><span class="meta">@clock</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">snooze</span><span class="params">(seconds)</span>:</span></span><br><span class="line">    time.sleep(seconds)</span><br><span class="line"></span><br><span class="line"><span class="meta">@clock</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">factorial</span><span class="params">(n)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span> <span class="keyword">if</span> n &lt; <span class="number">2</span> <span class="keyword">else</span> n*factorial(n<span class="number">-1</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__==<span class="string">'__main__'</span>:</span><br><span class="line">    print(<span class="string">'*'</span> * <span class="number">40</span>, <span class="string">'Calling snooze(.123)'</span>)</span><br><span class="line">    snooze(<span class="number">.123</span>)</span><br><span class="line">    print(<span class="string">'*'</span> * <span class="number">40</span>, <span class="string">'Calling factorial(6)'</span>)</span><br><span class="line">    print(<span class="string">'6! ='</span>, factorial(<span class="number">6</span>))</span><br></pre></td></tr></table></figure><h4 id="工作原理"><a href="#工作原理" class="headerlink" title="工作原理"></a>工作原理</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@clock</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">factorial</span><span class="params">(n)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span> <span class="keyword">if</span> n &lt; <span class="number">2</span> <span class="keyword">else</span> n*factorial(n<span class="number">-1</span>)</span><br><span class="line"></span><br><span class="line">其实等价于：</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">factorial</span><span class="params">(n)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span> <span class="keyword">if</span> n &lt; <span class="number">2</span> <span class="keyword">else</span> n*factorial(n<span class="number">-1</span>)</span><br><span class="line">factorial = clock(factorial)       <span class="comment"># 就是一个语法糖</span></span><br></pre></td></tr></table></figure><p>因此,在两个示例中,factorial 会作为 func 参数传给 clock(参见示例 7-15)。然后, clock 函数会返回 clocked 函数,Python 解释器在背后会把 clocked 赋值给 factorial。</p><p>上面实现的 clock 装饰器有几个缺点:不支持关键字参数,而且遮盖了被装饰函数的 <code>__name__</code> 和 <code>__doc__</code> 属性。<br>functools.wraps 装饰器把相关的属性从 func 复制到 clocked 中。此外,这个新版还能正确处理关键字参数。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">importimporttime</span><br><span class="line">functools</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">clock</span><span class="params">(func)</span>:</span></span><br><span class="line"><span class="meta">    @functools.wraps(func)</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">clocked</span><span class="params">(*args, **kwargs)</span>:</span></span><br><span class="line">        t0 = time.time()</span><br><span class="line">        result = func(*args, **kwargs)</span><br><span class="line">        elapsed = time.time() - t0</span><br><span class="line">        name = func.__name__</span><br><span class="line">        arg_lst = []</span><br><span class="line">        <span class="keyword">if</span> args:</span><br><span class="line">            arg_lst.append(<span class="string">', '</span>.join(repr(arg) <span class="keyword">for</span> arg <span class="keyword">in</span> args))</span><br><span class="line">        <span class="keyword">if</span> kwargs:</span><br><span class="line">            pairs = [<span class="string">'%s=%r'</span> % (k, w) <span class="keyword">for</span> k, w <span class="keyword">in</span> sorted(kwargs.items())]</span><br><span class="line">            arg_lst.append(<span class="string">', '</span>.join(pairs))</span><br><span class="line">        arg_str = <span class="string">', '</span>.join(arg_lst)</span><br><span class="line">        print(<span class="string">'[%0.8fs] %s(%s) -&gt; %r '</span> % (elapsed, name, arg_str, result))</span><br><span class="line">        <span class="keyword">return</span> result</span><br><span class="line">    <span class="keyword">return</span> clocked</span><br></pre></td></tr></table></figure><h3 id="参数化装饰器"><a href="#参数化装饰器" class="headerlink" title="参数化装饰器"></a>参数化装饰器</h3><p>为了便于启用或禁用 register 执行的函数注册功能,我们为它提供一个可选的 active 参数,设为 False 时,不注册被装饰的函数。<br>从概念上看,这个新的 register 函数不是装饰器,而是装饰器工厂函数。调用它会返回真正的装饰器,这才是应用到目标函数上的装饰器。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">registry = set()  <span class="comment"># registry 现在是一个 set 对象,这样添加和删除函数的速度更快。</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">register</span><span class="params">(active=True)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">decorate</span><span class="params">(func)</span>:</span> <span class="comment"># decorate 这个内部函数是真正的装饰器;注意,它的参数是一个函数。</span></span><br><span class="line">        print(<span class="string">'running register(active=%s)-&gt;decorate(%s))'</span> % (active, func))</span><br><span class="line">        <span class="keyword">if</span> active:   <span class="comment"># 只有 active 参数的值(从闭包中获取)是 True 时才注册 func</span></span><br><span class="line">            registry.add(func)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            registry.discard(func)  <span class="comment"># 如果 active 不为真,而且 func 在 registry 中,那么把它删除</span></span><br><span class="line">        <span class="keyword">return</span> func  <span class="comment"># decorate 是装饰器,必须返回一个函数</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> decorate  <span class="comment"># register 是装饰器工厂函数,因此返回 decorate</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@register(active=False) # @register 工厂函数必须作为函数调用,并且传入所需的参数</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f1</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">'running f1()'</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">@register() # 即使不传入参数,register 也必须作为函数调用</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f2</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">'running f2()'</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f3</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">'running f3()'</span>)</span><br></pre></td></tr></table></figure><p>这里的关键是,register() 要返回 decorate,然后把它应用到被装饰的函数上。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;装饰器的一大特性是,能把被装饰的函数替换成其他函数。第二个特性是,装饰器在加载模块时立即执行。&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="python" scheme="http://yoursite.com/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>用函数的一等对象重构策略模式</title>
    <link href="http://yoursite.com/2020/05/30/%E7%94%A8%E5%87%BD%E6%95%B0%E7%9A%84%E4%B8%80%E7%AD%89%E5%AF%B9%E8%B1%A1%E9%87%8D%E6%9E%84%E7%AD%96%E7%95%A5%E6%A8%A1%E5%BC%8F/"/>
    <id>http://yoursite.com/2020/05/30/%E7%94%A8%E5%87%BD%E6%95%B0%E7%9A%84%E4%B8%80%E7%AD%89%E5%AF%B9%E8%B1%A1%E9%87%8D%E6%9E%84%E7%AD%96%E7%95%A5%E6%A8%A1%E5%BC%8F/</id>
    <published>2020-05-30T14:29:05.000Z</published>
    <updated>2021-06-12T14:02:58.177Z</updated>
    
    <content type="html"><![CDATA[<p>如果合理利用作为一等对象的函数,某些设计模式可以简化,“策略”模<br>式就是其中一个很好的例子。</p><a id="more"></a><p>假如一个网店制定了下述折扣规则。</p><ul><li>有 1000 或以上积分的顾客,每个订单享 5% 折扣。</li><li>同一订单中,单个商品的数量达到 20 个或以上,享 10% 折扣。</li><li>订单中的不同商品达到 10 个或以上,享 7% 折扣。</li></ul><p>下面是我们的第一个实现：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> abc <span class="keyword">import</span> ABC, abstractmethod</span><br><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> namedtuple</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Customer = namedtuple(<span class="string">'Customer'</span>, <span class="string">'name fidelity'</span>)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LineItem</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, product, quantity, price)</span>:</span></span><br><span class="line">        self.product = product</span><br><span class="line">        self.quantity = quantity</span><br><span class="line">        self.price = price</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">total</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.price * self.quantity</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Order</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, customer, cart, promotion=None)</span>:</span></span><br><span class="line">        self.customer = customer</span><br><span class="line">        self.cart = list(cart)</span><br><span class="line">        self.promotion = promotion</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">total</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> hasattr(self, <span class="string">'__total'</span>):</span><br><span class="line">            self.__total = sum(item.total() <span class="keyword">for</span> item <span class="keyword">in</span> self.cart)</span><br><span class="line">        <span class="keyword">return</span> self.__total</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">due</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> self.promotion <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">            discount = <span class="number">0</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            discount = self.promotion.discount(self)</span><br><span class="line">        <span class="keyword">return</span> self.total() - discount</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__repr__</span><span class="params">(self)</span>:</span></span><br><span class="line">        fmt = <span class="string">'&lt;Order total: &#123;:.2f&#125; due: &#123;:.2f&#125;&gt;'</span></span><br><span class="line">        <span class="keyword">return</span> fmt.format(self.total(), self.due())</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Promotion</span><span class="params">(ABC)</span>:</span>  <span class="comment"># 策略，抽象基类</span></span><br><span class="line"><span class="meta">    @abstractmethod    # 在 Python 3.4 中,声明抽象基类最简单的方式是子类化abc.ABC。</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">discount</span><span class="params">(self, order)</span>:</span></span><br><span class="line">        <span class="string">"""返回折扣金额"""</span></span><br><span class="line">    </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FidelityPromo</span><span class="params">(Promotion)</span>:</span>  <span class="comment"># 第一个具体策略</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">discount</span><span class="params">(self, order)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> order.total() * <span class="number">.05</span> <span class="keyword">if</span> order.customer.fidelity &gt;= <span class="number">1000</span> <span class="keyword">else</span> <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BulkItemPromo</span><span class="params">(Promotion)</span>:</span>  <span class="comment"># 第二个具体策略</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">discount</span><span class="params">(self, order)</span>:</span></span><br><span class="line">        discount = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> item <span class="keyword">in</span> order.cart:</span><br><span class="line">            <span class="keyword">if</span> item.quantity &gt;= <span class="number">20</span>:</span><br><span class="line">                discount += item.total() * <span class="number">.1</span></span><br><span class="line">        <span class="keyword">return</span> discount</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LargeOrderPromo</span><span class="params">(Promotion)</span>:</span>  <span class="comment"># 第三个具体策略</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">discount</span><span class="params">(self, order)</span>:</span></span><br><span class="line">        distinct_items = &#123;item.product <span class="keyword">for</span> item <span class="keyword">in</span> order.cart&#125;</span><br><span class="line">        <span class="keyword">if</span> len(distinct_items) &gt;= <span class="number">10</span>:</span><br><span class="line">            <span class="keyword">return</span> order.total() * <span class="number">.07</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span></span><br></pre></td></tr></table></figure><p>使用示例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>joe = Customer(<span class="string">'John Doe'</span>, <span class="number">0</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>ann = Customer(<span class="string">'Ann Smith'</span>, <span class="number">1100</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>cart = [LineItem(<span class="string">'banana'</span>, <span class="number">4</span>, <span class="number">.5</span>),</span><br><span class="line">...</span><br><span class="line"> LineItem(<span class="string">'apple'</span>, <span class="number">10</span>, <span class="number">1.5</span>),</span><br><span class="line">...</span><br><span class="line"> LineItem(<span class="string">'watermellon'</span>, <span class="number">5</span>, <span class="number">5.0</span>)]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>Order(joe, cart, FidelityPromo())</span><br><span class="line">&lt;Order total: <span class="number">42.00</span> due: <span class="number">42.00</span>&gt;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>Order(ann, cart, FidelityPromo())</span><br><span class="line">&lt;Order total: <span class="number">42.00</span> due: <span class="number">39.90</span>&gt;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>banana_cart = [LineItem(<span class="string">'banana'</span>, <span class="number">30</span>, <span class="number">.5</span>),</span><br><span class="line">...</span><br><span class="line"> LineItem(<span class="string">'apple'</span>, <span class="number">10</span>, <span class="number">1.5</span>)]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>Order(joe, banana_cart, BulkItemPromo())</span><br><span class="line">&lt;Order total: <span class="number">30.00</span> due: <span class="number">28.50</span>&gt;</span><br></pre></td></tr></table></figure><h4 id="使用函数实现“策略”模式"><a href="#使用函数实现“策略”模式" class="headerlink" title="使用函数实现“策略”模式"></a>使用函数实现“策略”模式</h4><p>在上面的实现中，每个具体策略都是一个类,而且都只定义了一个方法,即 discount。此外,策略实例没有状态(没有实例属性)，那么可以把具体的策略换成普通的函数：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> namedtuple</span><br><span class="line"></span><br><span class="line">Customer = namedtuple(<span class="string">'Customer'</span>, <span class="string">'name fidelity'</span>)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LineItem</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, product, quantity, price)</span>:</span></span><br><span class="line">        self.product = product</span><br><span class="line">        self.quantity = quantity</span><br><span class="line">        self.price = price</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">total</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.price * self.quantity</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Order</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, customer, cart, promotion=None)</span>:</span></span><br><span class="line">        self.customer = customer</span><br><span class="line">        self.cart = list(cart)</span><br><span class="line">        self.promotion = promotion</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">total</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> hasattr(self, <span class="string">'__total'</span>):</span><br><span class="line">            self.__total = sum(item.total() <span class="keyword">for</span> item <span class="keyword">in</span> self.cart)</span><br><span class="line">        <span class="keyword">return</span> self.__total</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">due</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> self.promotion <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">            discount = <span class="number">0</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            discount = self.promotion(self)  <span class="comment"># 计算折扣只需调用self.pormotion()函数</span></span><br><span class="line">        <span class="keyword">return</span> self.total() - discount</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__repr__</span><span class="params">(self)</span>:</span></span><br><span class="line">        fmt = <span class="string">'&lt;Order total: &#123;:.2f&#125; due: &#123;:.2f&#125;&gt;'</span></span><br><span class="line">        <span class="keyword">return</span> fmt.format(self.total(), self.due())</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fidelity_promo</span><span class="params">(order)</span>:</span>   <span class="comment"># 这里的3个函数都是策略</span></span><br><span class="line">    <span class="keyword">return</span> order.total() * <span class="number">.05</span> <span class="keyword">if</span> order.customer.fidelity &gt;= <span class="number">1000</span> <span class="keyword">else</span> <span class="number">0</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">bulk_item_promo</span><span class="params">(order)</span>:</span></span><br><span class="line">    discount = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> item <span class="keyword">in</span> order.cart:</span><br><span class="line">        <span class="keyword">if</span> item.quantity &gt;= <span class="number">20</span>:</span><br><span class="line">            discount += item.total() * <span class="number">.1</span></span><br><span class="line">    <span class="keyword">return</span> discount</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">large_order_promo</span><span class="params">(order)</span>:</span></span><br><span class="line">    distinct_items = &#123;item.product <span class="keyword">for</span> item <span class="keyword">in</span> order.cart&#125;</span><br><span class="line">    <span class="keyword">if</span> len(distinct_items) &gt;= <span class="number">10</span>:</span><br><span class="line">        <span class="keyword">return</span> order.total() * <span class="number">.07</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span></span><br></pre></td></tr></table></figure><p>这个版本的order类使用起来更简单。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>joe = Customer(<span class="string">'John Doe'</span>, <span class="number">0</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>ann = Customer(<span class="string">'Ann Smith'</span>, <span class="number">1100</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>cart = [LineItem(<span class="string">'banana'</span>, <span class="number">4</span>, <span class="number">.5</span>),</span><br><span class="line">...</span><br><span class="line"> LineItem(<span class="string">'apple'</span>, <span class="number">10</span>, <span class="number">1.5</span>),</span><br><span class="line">...</span><br><span class="line"> LineItem(<span class="string">'watermellon'</span>, <span class="number">5</span>, <span class="number">5.0</span>)]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>Order(joe, cart, fidelity_promo) <span class="comment"># 为了把折扣策略应用到 Order 实例上,只需把促销函数作为参数传入。</span></span><br><span class="line">&lt;Order total: <span class="number">42.00</span> due: <span class="number">42.00</span>&gt;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>Order(ann, cart, fidelity_promo)</span><br><span class="line">&lt;Order total: <span class="number">42.00</span> due: <span class="number">39.90</span>&gt;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>banana_cart = [LineItem(<span class="string">'banana'</span>, <span class="number">30</span>, <span class="number">.5</span>),</span><br><span class="line">...</span><br><span class="line"> LineItem(<span class="string">'apple'</span>, <span class="number">10</span>, <span class="number">1.5</span>)]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>Order(joe, banana_cart, bulk_item_promo)</span><br><span class="line">&lt;Order total: <span class="number">30.00</span> due: <span class="number">28.50</span>&gt;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>long_order = [LineItem(str(item_code), <span class="number">1</span>, <span class="number">1.0</span>)</span><br><span class="line">...</span><br><span class="line"> <span class="keyword">for</span> item_code <span class="keyword">in</span> range(<span class="number">10</span>)]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>Order(joe, long_order, large_order_promo)</span><br><span class="line">&lt;Order total: <span class="number">10.00</span> due: <span class="number">9.30</span>&gt;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>Order(joe, cart, large_order_promo)</span><br><span class="line">&lt;Order total: <span class="number">42.00</span> due: <span class="number">42.00</span>&gt;</span><br></pre></td></tr></table></figure><h4 id="选择最佳的策略：简单方式"><a href="#选择最佳的策略：简单方式" class="headerlink" title="选择最佳的策略：简单方式"></a>选择最佳的策略：简单方式</h4><p>再添加一个函数就可以了：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">promos = [fidelity_promo, bulk_item_promo, large_order_promo]</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">best_promo</span><span class="params">(order)</span>:</span></span><br><span class="line"><span class="string">"""选择可用的最佳折扣</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="keyword">return</span> max(promo(order) <span class="keyword">for</span> promo <span class="keyword">in</span> promos) <span class="comment"># 使用生成器表达式把 order 传给 promos 列表中的各个函数,返回折扣额度最大的那个函数。</span></span><br></pre></td></tr></table></figure><p>promos 是函数列表。习惯函数是一等对象后,自然而然就会构建那种数据结构存储函数。<br>现在还有一个问题就是，如果加了新的策略，需要手动更新promos列表，下面有两种解决方案：</p><h5 id="找出模块中的全部策略"><a href="#找出模块中的全部策略" class="headerlink" title="找出模块中的全部策略"></a>找出模块中的全部策略</h5><p>使用 globals 函数帮助 best_promo 自动找到其他可用的*_promo 函数：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">promos = [globals()[name] <span class="keyword">for</span> name <span class="keyword">in</span> globals() <span class="keyword">if</span> name.endswith(<span class="string">'_promo'</span>) <span class="keyword">and</span> name != <span class="string">'best_promo'</span>]  <span class="comment"># 过滤掉 best_promo 自身,防止无限递归。</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">best_promo</span><span class="params">(order)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> max(promo(order) <span class="keyword">for</span> promo <span class="keyword">in</span> promos)</span><br></pre></td></tr></table></figure><p>下面是另一种方法：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">promos = [func <span class="keyword">for</span> name, func <span class="keyword">in</span> inspect.getmembers(promotions, inspect.isfunction)]</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">best_promo</span><span class="params">(order)</span>:</span></span><br><span class="line"><span class="string">"""选择可用的最佳折扣</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line">    <span class="keyword">return</span> max(promo(order) <span class="keyword">for</span> promo <span class="keyword">in</span> promos)</span><br></pre></td></tr></table></figure><p>用inspect模块。</p><p>动态收集促销折扣函数更为显式的一种方案是使用简单的装饰器。之后会看到。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;如果合理利用作为一等对象的函数,某些设计模式可以简化,“策略”模&lt;br&gt;式就是其中一个很好的例子。&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="python" scheme="http://yoursite.com/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>python函数</title>
    <link href="http://yoursite.com/2020/05/26/python%E5%87%BD%E6%95%B0-1/"/>
    <id>http://yoursite.com/2020/05/26/python%E5%87%BD%E6%95%B0-1/</id>
    <published>2020-05-26T14:03:18.000Z</published>
    <updated>2021-06-12T14:02:58.147Z</updated>
    
    <content type="html"><![CDATA[<p>python函数总结。</p><a id="more"></a><h4 id="一等函数"><a href="#一等函数" class="headerlink" title="一等函数"></a>一等函数</h4><p>编程语言理论家把“一等对象”定义为满足下述条件的程序实体:</p><ul><li>在运行是创建</li><li>能赋值给变量或数据结构中元素</li><li>能作为参数传给变量</li><li>能作为函数的返回结果  </li></ul><p>在 Python 中,所有函数都是一等对象。</p><h4 id="匿名函数"><a href="#匿名函数" class="headerlink" title="匿名函数"></a>匿名函数</h4><p>lambda 关键字在 Python 表达式内创建匿名函数。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>fruits = [<span class="string">'strawberry'</span>, <span class="string">'fig'</span>, <span class="string">'apple'</span>, <span class="string">'cherry'</span>, <span class="string">'raspberry'</span>, <span class="string">'banana'</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>sorted(fruits, key=<span class="keyword">lambda</span> word: word[::<span class="number">-1</span>])</span><br><span class="line">[<span class="string">'banana'</span>, <span class="string">'apple'</span>, <span class="string">'fig'</span>, <span class="string">'raspberry'</span>, <span class="string">'strawberry'</span>, <span class="string">'cherry'</span>]</span><br></pre></td></tr></table></figure><p>除了作为参数传给高阶函数之外，Python 很少使用匿名函数。由于句法上的限制，非平凡的 lambda 表达式要么难以阅读，要么无法写出。</p><h4 id="可调用对象"><a href="#可调用对象" class="headerlink" title="可调用对象"></a>可调用对象</h4><blockquote><p>除了用户定义的函数，调用运算符(即 ())还可以应用到其他对象 上。如果想判断对象能否调用，可以使用内置的 callable() 函数。 Python 数据模型文档列出了 7 种可调用对象。</p><ul><li>用户定义的函数:<br>  使用def语句或lambda表达式创建</li></ul></blockquote><ul><li>内置函数:<br>  使用C语言（CPython）实现的函数，如len或者time.strftime</li><li>内置方法:<br>  使用C语言实现的方法，如dict.get</li><li>方法:<br>  在类的定义体中定义的函数</li><li>类:<br>  调用类时会运行类的 <code>__new__</code> 方法创建一个实例，然后运行 <code>__init__</code> 方法，初始化实例，最后把实例返回给调用方。因为 Python 没有 new 运算符，所以调用类相当于调用函数。</li><li>类的实例:<br>  如果类定义了 <code>__call__</code> 方法，那么它的实例可以作为函数调用。</li><li>生成器函数:<br>  使用 yield 关键字的函数或方法。调用生成器函数返回的是生成 器对象。</li></ul><p>可以使用内置的callable()函数来判断对象是否可调用。</p><h3 id="用户定义的可调用类型"><a href="#用户定义的可调用类型" class="headerlink" title="用户定义的可调用类型"></a>用户定义的可调用类型</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BingoCage</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, items)</span>:</span></span><br><span class="line">        self._items = list(items)     <span class="comment"># 在本地构建一个副本，防止列表意外副作用。</span></span><br><span class="line">        random.shuffle(self._items)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">pick</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="keyword">return</span> self._items.pop()</span><br><span class="line">        <span class="keyword">except</span> IndexError:</span><br><span class="line">            <span class="keyword">raise</span> LookupError(<span class="string">'pick from empty BingoCage'</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__call__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.pick()            <span class="comment"># bingo.pick()的快捷方式是bingo()</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>bingo = BingoCage(range(<span class="number">3</span>))</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>bingo.pick()</span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>bingo()</span><br><span class="line"><span class="number">0</span></span><br><span class="line">&gt;&gt; callable(bingo)</span><br><span class="line"><span class="literal">True</span></span><br></pre></td></tr></table></figure><h3 id="函数内省"><a href="#函数内省" class="headerlink" title="函数内省"></a>函数内省</h3><p>dir函数可以查看函数具有的属性：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>dir(factorial)</span><br><span class="line">[<span class="string">'__annotations__'</span>, <span class="string">'__call__'</span>, <span class="string">'__class__'</span>, <span class="string">'__closure__'</span>, <span class="string">'__code__'</span>, <span class="string">'__defaults__'</span>, <span class="string">'__delattr__'</span>, <span class="string">'__dict__'</span>, <span class="string">'__dir__'</span>, <span class="string">'__doc__'</span>, <span class="string">'__eq__'</span>, <span class="string">'__format__'</span>, <span class="string">'__ge__'</span>, <span class="string">'__get__'</span>, <span class="string">'__getattribute__'</span>, <span class="string">'__globals__'</span>, <span class="string">'__gt__'</span>, <span class="string">'__hash__'</span>, <span class="string">'__init__'</span>, <span class="string">'__kwdefaults__'</span>, <span class="string">'__le__'</span>, <span class="string">'__lt__'</span>, <span class="string">'__module__'</span>, <span class="string">'__name__'</span>, <span class="string">'__ne__'</span>, <span class="string">'__new__'</span>, <span class="string">'__qualname__'</span>, <span class="string">'__reduce__'</span>, <span class="string">'__reduce_ex__'</span>, <span class="string">'__repr__'</span>, <span class="string">'__setattr__'</span>, <span class="string">'__sizeof__'</span>, <span class="string">'__str__'</span>, <span class="string">'__subclasshook__'</span>]</span><br><span class="line">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure><p>下面是几个与把函数视为对象相关的几个属性：</p><h4 id="dict"><a href="#dict" class="headerlink" title="dict"></a><strong>dict</strong></h4><p>下面是函数专有而用户定义的一般对象没有的属性：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">18</span>]: <span class="class"><span class="keyword">class</span> <span class="title">C</span>:</span> <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">19</span>]: obj = C()</span><br><span class="line"></span><br><span class="line">In [<span class="number">20</span>]: <span class="function"><span class="keyword">def</span> <span class="title">func</span><span class="params">()</span>:</span> <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">21</span>]: sorted(set(dir(func)) - set(dir(obj)))</span><br><span class="line">Out[<span class="number">21</span>]:</span><br><span class="line">[<span class="string">'__annotations__'</span>,</span><br><span class="line"> <span class="string">'__call__'</span>,</span><br><span class="line"> <span class="string">'__closure__'</span>,</span><br><span class="line"> <span class="string">'__code__'</span>,</span><br><span class="line"> <span class="string">'__defaults__'</span>,</span><br><span class="line"> <span class="string">'__get__'</span>,</span><br><span class="line"> <span class="string">'__globals__'</span>,</span><br><span class="line"> <span class="string">'__kwdefaults__'</span>,</span><br><span class="line"> <span class="string">'__name__'</span>,</span><br><span class="line"> <span class="string">'__qualname__'</span>]</span><br></pre></td></tr></table></figure><h3 id="从定位参数到仅限关键字参数"><a href="#从定位参数到仅限关键字参数" class="headerlink" title="从定位参数到仅限关键字参数"></a>从定位参数到仅限关键字参数</h3><h3 id="获取关于参数的信息"><a href="#获取关于参数的信息" class="headerlink" title="获取关于参数的信息"></a>获取关于参数的信息</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> bobo</span><br><span class="line"></span><br><span class="line"><span class="meta">@bobo.query('/')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">hello</span><span class="params">(person)</span>:</span></span><br><span class="line"><span class="keyword">return</span> <span class="string">'Hello %s!'</span> % person</span><br></pre></td></tr></table></figure><p>这里的关键是，Bobo 会内省 hello 函数，发现它需要一个名为 person 的参数，然后从请求中获取那个名称对应的参数，将其传给 hello 函 数，因此程序员根本不用触碰请求对象。</p><p>Bobo 是怎么知道函数需要哪个参数的呢?它又是怎么知道参数有没有 默认值呢?<br>函数对象有个 <code>__defaults__</code> 属性，它的值是一个元组，里面保存着定位参数和关键字参数的默认值。仅限关键字参数的默认值在 <code>__kwdefaults__</code> 属性中。然而，参数的名称在 <code>__code__</code> 属性中，它的值是一个 code 对象引用，自身也有很多属性。</p><p>再看下面的一个函数：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">clip</span><span class="params">(text, max_len=<span class="number">80</span>)</span>:</span></span><br><span class="line">    <span class="string">"""在max_len前面或后面的第一个空格处截断文本 """</span></span><br><span class="line">    end = <span class="literal">None</span></span><br><span class="line">    <span class="keyword">if</span> len(text) &gt; max_len:</span><br><span class="line">        space_before = text.rfind(<span class="string">' '</span>, <span class="number">0</span>, max_len)</span><br><span class="line">        <span class="keyword">if</span> space_before &gt;= <span class="number">0</span>:</span><br><span class="line">            end = space_before</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            space_after = text.rfind(<span class="string">' '</span>, max_len)</span><br><span class="line">            <span class="keyword">if</span> space_after &gt;= <span class="number">0</span>:</span><br><span class="line">                end = space_after</span><br><span class="line">    <span class="keyword">if</span> end <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">        end = len(text)</span><br><span class="line">    <span class="keyword">return</span> text[:end].rfind()</span><br></pre></td></tr></table></figure><p>提取关于函数的信息：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> clip <span class="keyword">import</span> clip</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>clip.__defaults__</span><br><span class="line">(<span class="number">80</span>,)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>clip.__code__ <span class="comment"># doctest: +ELLIPSIS &lt;code object clip at 0x...&gt;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>clip.__code__.co_varnames</span><br><span class="line">(<span class="string">'text'</span>, <span class="string">'max_len'</span>, <span class="string">'end'</span>, <span class="string">'space_before'</span>, <span class="string">'space_after'</span>) &gt;&gt;&gt; clip.__code__.co_argcount</span><br><span class="line"><span class="number">2</span></span><br></pre></td></tr></table></figure><p>使用inspect模块更好地提取函数的信息：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> clip <span class="keyword">import</span> clip</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> inspect <span class="keyword">import</span> signature</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>sig = signature(clip)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>sig <span class="comment"># doctest: +ELLIPSIS</span></span><br><span class="line">&lt;inspect.Signature object at <span class="number">0</span>x...&gt;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>str(sig)</span><br><span class="line"><span class="string">'(text, max_len=80)'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">for</span> name, param <span class="keyword">in</span> sig.parameters.items():</span><br><span class="line"><span class="meta">... </span>print(param.kind, <span class="string">':'</span>, name, <span class="string">'='</span>, param.default) ...</span><br><span class="line">POSITIONAL_OR_KEYWORD : text = &lt;<span class="class"><span class="keyword">class</span> '<span class="title">inspect</span>.<span class="title">_empty</span>'&gt; <span class="title">POSITIONAL_OR_KEYWORD</span> :</span> max_len = <span class="number">80</span></span><br></pre></td></tr></table></figure><p>kind 属性的值是 _ParameterKind 类中的 5 个值之一，列举如下：</p><ul><li>POSITIONAL_OR_KEYWORD: 可以通过定位参数和关键字参数传入的形参(多数 Python 函数的参 数属于此类)。</li><li>VAR_POSITIONAL: 定位参数元组</li><li>VAR_KEYWORD: 关键字参数字典</li><li>KEYWORD_ONLY: 仅限关键字参数</li><li>POSITIONAL_ONLY: 仅限定位参数;目前，Python 声明函数的句法不支持，但是有些使 用 C 语言实现且不接受关键字参数的函数(如 divmod)支持。</li></ul><p>inspect.Signature 对象有个 bind 方法，它可以把任意个参数绑定 到签名中的形参上，所用的规则与实参到形参的匹配方式一样:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> inspect</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>sig = inspect.signature(tag)  <span class="comment"># 获取tag函数的签名</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>my_tag = &#123;<span class="string">'name'</span>: <span class="string">'img'</span>, <span class="string">'title'</span>: <span class="string">'Sunset Boulevard'</span>,</span><br><span class="line"><span class="meta">... </span><span class="string">'src'</span>: <span class="string">'sunset.jpg'</span>, <span class="string">'cls'</span>: <span class="string">'framed'</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>bound_args = sig.bind(**my_tag)  <span class="comment"># 把一个字典参数传给.bind()方法</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>bound_args</span><br><span class="line">&lt;inspect.BoundArguments object at <span class="number">0</span>x...&gt; </span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">for</span> name, value <span class="keyword">in</span> bound_args.arguments.items(): </span><br><span class="line"><span class="meta">... </span>print(name, <span class="string">'='</span>, value)</span><br><span class="line">...</span><br><span class="line">name = img</span><br><span class="line">cls = framed</span><br><span class="line">attrs = &#123;<span class="string">'title'</span>: <span class="string">'Sunset Boulevard'</span>, <span class="string">'src'</span>: <span class="string">'sunset.jpg'</span>&#125; &gt;&gt;&gt; <span class="keyword">del</span> my_tag[<span class="string">'name'</span>] </span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>bound_args = sig.bind(**my_tag)   <span class="comment"># 缺少name参数，报错</span></span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">...</span><br><span class="line">TypeError: <span class="string">'name'</span> parameter lacking default value</span><br></pre></td></tr></table></figure><p>这个示例在 inspect 模块的帮助下，展示了 Python 数据模型把实参绑 定给函数调用中的形参的机制，这与解释器使用的机制相同。</p><h3 id="函数注解"><a href="#函数注解" class="headerlink" title="函数注解"></a>函数注解</h3><p>和上面的clip唯一的区别在于第一行</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">clip</span><span class="params">(text: str, max_len: <span class="string">'int &gt; 0'</span> = <span class="number">80</span>)</span> -&gt; str:</span></span><br><span class="line">    end = <span class="literal">None</span></span><br><span class="line">    <span class="keyword">if</span> len(text) &gt; max_len:</span><br><span class="line">        space_before = text.rfind(<span class="string">' '</span>, <span class="number">0</span>, max_len)</span><br><span class="line">        <span class="keyword">if</span> space_before &gt;= <span class="number">0</span>:</span><br><span class="line">            end = space_before</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            space_after = text.rfind(<span class="string">' '</span>, max_len)</span><br><span class="line">            <span class="keyword">if</span> space_after &gt;= <span class="number">0</span>:</span><br><span class="line">                end = space_after</span><br><span class="line">    <span class="keyword">if</span> end <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">        end = len(text)</span><br><span class="line">    <span class="keyword">return</span> text[:end].rfind()</span><br></pre></td></tr></table></figure><p>注解不会做任何处理，只是存储在函数的 <code>__annotations__</code> 属性(一个字典)中:</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> clip_annot <span class="keyword">import</span> clip</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>clip.__annotations__</span><br><span class="line">&#123;'text': &lt;class 'str'&gt;, 'max_len': 'int &gt; 0', 'return': &lt;class 'str'&gt;&#125;</span><br></pre></td></tr></table></figure><h3 id="接收任意数量参数的函数"><a href="#接收任意数量参数的函数" class="headerlink" title="接收任意数量参数的函数"></a>接收任意数量参数的函数</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">avg</span><span class="params">(first, *rest)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> (first + sum(rest)) / (<span class="number">1</span> + len(rest))</span><br><span class="line"></span><br><span class="line">在这个例子中，rest是由所有其他位置参数组成的元组。然后我们在代码中把它当成了一个序列来进行后续的计算。</span><br><span class="line"></span><br><span class="line">如果你还希望某个函数能同时接受任意数量的位置参数和关键字参数，可以同时使用*和**。比如：</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">anyargs</span><span class="params">(*args, **kwargs)</span>:</span></span><br><span class="line">    print(args) <span class="comment"># A tuple</span></span><br><span class="line">    print(kwargs) <span class="comment"># A dict</span></span><br></pre></td></tr></table></figure><h3 id="只接收关键字参数的函数"><a href="#只接收关键字参数的函数" class="headerlink" title="只接收关键字参数的函数"></a>只接收关键字参数的函数</h3><p>将强制关键字参数放到某个*参数或者单个*后面就能达到这种效果。比如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">recv</span><span class="params">(maxsize, *, block)</span>:</span></span><br><span class="line">    <span class="string">'Receives a message'</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">recv(<span class="number">1024</span>, <span class="literal">True</span>) <span class="comment"># TypeError</span></span><br><span class="line">recv(<span class="number">1024</span>, block=<span class="literal">True</span>) <span class="comment"># Ok</span></span><br></pre></td></tr></table></figure><p>很多情况下，使用强制关键字参数会比使用位置参数表意更加清晰，程序也更加具有可读性。</p><h3 id="返回多个值的函数"><a href="#返回多个值的函数" class="headerlink" title="返回多个值的函数"></a>返回多个值的函数</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">myfun</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span></span><br><span class="line"></span><br><span class="line">a,b,c = myfunc()</span><br><span class="line">a</span><br><span class="line"><span class="number">1</span></span><br><span class="line">b</span><br><span class="line"><span class="number">2</span></span><br><span class="line">c</span><br><span class="line"></span><br><span class="line">尽管myfun()看上去返回了多个值，实际上是先创建了一个元组然后返回的。 这个语法看上去比较奇怪，实际上我们使用的是逗号来生成一个元组，而不是用括号。比如下面的：</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = (<span class="number">1</span>, <span class="number">2</span>) <span class="comment"># With parentheses</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a</span><br><span class="line">(<span class="number">1</span>, <span class="number">2</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>b = <span class="number">1</span>, <span class="number">2</span> <span class="comment"># Without parentheses</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>b</span><br><span class="line">(<span class="number">1</span>, <span class="number">2</span>)</span><br><span class="line">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure><h3 id="定义有默认参数的函数"><a href="#定义有默认参数的函数" class="headerlink" title="定义有默认参数的函数"></a>定义有默认参数的函数</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">很简单：</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">spam</span><span class="params">(a, b=<span class="number">42</span>)</span>:</span></span><br><span class="line">    print(a, b)</span><br><span class="line"></span><br><span class="line">spam(<span class="number">1</span>) <span class="comment"># Ok. a=1, b=42</span></span><br><span class="line">spam(<span class="number">1</span>, <span class="number">2</span>) <span class="comment"># Ok. a=1, b=2</span></span><br><span class="line"></span><br><span class="line">如果默认参数是一个可修改的容器比如一个列表、集合或者字典，可以使用<span class="literal">None</span>作为默认值，就像下面这样：</span><br><span class="line"><span class="comment"># Using a list as a default value</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">spam</span><span class="params">(a, b=None)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> b <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">        b = []</span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line">如果你并不想提供一个默认值，而是想仅仅测试下某个默认参数是不是有传递进来，可以像下面这样写：</span><br><span class="line">_no_value = object()</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">spam</span><span class="params">(a, b=_no_value)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> b <span class="keyword">is</span> _no_value:</span><br><span class="line">        print(<span class="string">'No b value supplied'</span>)</span><br><span class="line">    ...</span><br><span class="line">这里对 object() 的使用看上去有点不太常见。object 是python中所有类的基类。 你可以创建 object 类的实例，但是这些实例没什么实际用处，因为它并没有任何有用的方法， 也没有任何实例数据(因为它没有任何的实例字典，你甚至都不能设置任何属性值)。 你唯一能做的就是测试同一性。这个刚好符合我的要求，因为我在函数中就只是需要一个同一性的测试而已。</span><br><span class="line"></span><br><span class="line">定义带默认值参数的函数是很简单的,但绝不仅仅只是这个，还有一些东西在这里也深入讨论下:</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>x = <span class="number">42</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="function"><span class="keyword">def</span> <span class="title">spam</span><span class="params">(a, b=x)</span>:</span></span><br><span class="line"><span class="meta">... </span>    print(a, b)</span><br><span class="line">...</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>spam(<span class="number">1</span>)</span><br><span class="line"><span class="number">1</span> <span class="number">42</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>x = <span class="number">23</span> <span class="comment"># Has no effect</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>spam(<span class="number">1</span>)</span><br><span class="line"><span class="number">1</span> <span class="number">42</span></span><br><span class="line">&gt;&gt;&gt;</span><br><span class="line">注意到当我们改变x的值的时候对默认参数值并没有影响，这是因为在函数定义的时候就已经确定了它的默认值了。</span><br><span class="line">其次，默认参数的值应该是不可变的对象，比如<span class="literal">None</span>、<span class="literal">True</span>、<span class="literal">False</span>、数字或字符串。</span><br></pre></td></tr></table></figure><h3 id="匿名函数捕获变量值"><a href="#匿名函数捕获变量值" class="headerlink" title="匿名函数捕获变量值"></a>匿名函数捕获变量值</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>x = <span class="number">10</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = <span class="keyword">lambda</span> y: x + y</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>x = <span class="number">20</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>b = <span class="keyword">lambda</span> y: x + y</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a(<span class="number">10</span>)</span><br><span class="line"><span class="number">30</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>b(<span class="number">10</span>)</span><br><span class="line"><span class="number">30</span></span><br></pre></td></tr></table></figure><blockquote><p>这其中的奥妙在于lambda表达式中的x是一个自由变量， 在运行时绑定值，而不是定义时就绑定，这跟函数的默认值参数定义是不同的。 因此，在调用这个lambda表达式的时候，x的值是执行时的值。<br>例如：</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>x = <span class="number">15</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a(<span class="number">10</span>)</span><br><span class="line"><span class="number">25</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>x = <span class="number">3</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a(<span class="number">10</span>)</span><br><span class="line"><span class="number">13</span></span><br></pre></td></tr></table></figure><p>如果你想让某个匿名函数在定义时就捕获到值，可以将那个参数值定义成默认参数即可，就像下面这样：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>x = <span class="number">10</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = <span class="keyword">lambda</span> y, x=x: x + y</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>x = <span class="number">20</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>b = <span class="keyword">lambda</span> y, x=x: x + y</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a(<span class="number">10</span>)</span><br><span class="line"><span class="number">20</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>b(<span class="number">10</span>)</span><br><span class="line"><span class="number">30</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>funcs = [<span class="keyword">lambda</span> x: x+n <span class="keyword">for</span> n <span class="keyword">in</span> range(<span class="number">5</span>)]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">for</span> f <span class="keyword">in</span> funcs:</span><br><span class="line"><span class="meta">... </span>print(f(<span class="number">0</span>))</span><br><span class="line">...</span><br><span class="line"><span class="number">4</span></span><br><span class="line"><span class="number">4</span></span><br><span class="line"><span class="number">4</span></span><br><span class="line"><span class="number">4</span></span><br><span class="line"><span class="number">4</span></span><br><span class="line">&gt;&gt;&gt;</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>funcs = [<span class="keyword">lambda</span> x, n=n: x+n <span class="keyword">for</span> n <span class="keyword">in</span> range(<span class="number">5</span>)]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">for</span> f <span class="keyword">in</span> funcs:</span><br><span class="line"><span class="meta">... </span>print(f(<span class="number">0</span>))</span><br><span class="line">...</span><br><span class="line"><span class="number">0</span></span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="number">3</span></span><br><span class="line"><span class="number">4</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;python函数总结。&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="python" scheme="http://yoursite.com/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>arch无线网卡配置</title>
    <link href="http://yoursite.com/2020/05/10/arch%E6%97%A0%E7%BA%BF%E7%BD%91%E5%8D%A1%E9%85%8D%E7%BD%AE/"/>
    <id>http://yoursite.com/2020/05/10/arch%E6%97%A0%E7%BA%BF%E7%BD%91%E5%8D%A1%E9%85%8D%E7%BD%AE/</id>
    <published>2020-05-10T03:28:35.000Z</published>
    <updated>2021-06-12T14:02:57.771Z</updated>
    
    <content type="html"><![CDATA[<p>突然发现买的intel nuc支持无线网卡（之前一直没发现。。。<br>简单的配置一下，以防没有有线可用的情况下，不至于太尴尬。</p><a id="more"></a><h3 id="查看设备状态："><a href="#查看设备状态：" class="headerlink" title="查看设备状态："></a>查看设备状态：</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">lspci -k</span><br></pre></td></tr></table></figure><p>如果里面有显示，则说明无线网卡驱动已经安装。</p><p>手动设置：<br>需要的包：iw, wpa_supplicant</p><p>几个常用命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">iw dev</span><br><span class="line"></span><br><span class="line">iw dev wlan0 link</span><br></pre></td></tr></table></figure><h3 id="启动网卡："><a href="#启动网卡：" class="headerlink" title="启动网卡："></a>启动网卡：</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ip link <span class="built_in">set</span> wlan0 up</span><br><span class="line">ip link show wlan0</span><br></pre></td></tr></table></figure><p>我用的是静态ip：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ip addr add 192.168.2.112/24 dev wlan0</span><br></pre></td></tr></table></figure><p>由于用的透明代理，网关由systemd-networkd管理，所以路由这里不需要加。</p><h3 id="查找接入点-wifi信号"><a href="#查找接入点-wifi信号" class="headerlink" title="查找接入点(wifi信号):"></a>查找接入点(wifi信号):</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">iw dev wlan0 scan | less</span><br></pre></td></tr></table></figure><p>根据SSID找到要连接的wifi</p><p>如果wifi的加密方式是WPA/WPA2（一般都是）根据下面的方式关联wifi信号：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">wpa_supplicant -B -i wlan0 -c &lt;(wpa_passphrase your_SSID you_key)  <span class="comment"># 这条命令要切到root用户</span></span><br><span class="line">iw dev wlan0 link</span><br></pre></td></tr></table></figure><h3 id="接下来是网络配置："><a href="#接下来是网络配置：" class="headerlink" title="接下来是网络配置："></a>接下来是网络配置：</h3><p>由于我是用systemd-networkd来管理，如果是其他的话，可以参考wiki</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/systemd/network/20-wireless.network</span><br><span class="line">[Match]</span><br><span class="line">Name=wlp6s0</span><br><span class="line"></span><br><span class="line">[Network]</span><br><span class="line">Address=192.168.2.112/24</span><br><span class="line">Gateway=192.168.2.237</span><br><span class="line">DNS=192.168.2.237</span><br></pre></td></tr></table></figure><p>重启systemd-networkd:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl restart systemd-networkd</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;突然发现买的intel nuc支持无线网卡（之前一直没发现。。。&lt;br&gt;简单的配置一下，以防没有有线可用的情况下，不至于太尴尬。&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="linux" scheme="http://yoursite.com/tags/linux/"/>
    
      <category term="arch" scheme="http://yoursite.com/tags/arch/"/>
    
  </entry>
  
  <entry>
    <title>bash变量引用</title>
    <link href="http://yoursite.com/2020/05/05/bash%E5%8F%98%E9%87%8F%E5%BC%95%E7%94%A8/"/>
    <id>http://yoursite.com/2020/05/05/bash%E5%8F%98%E9%87%8F%E5%BC%95%E7%94%A8/</id>
    <published>2020-05-05T07:43:18.000Z</published>
    <updated>2021-06-12T14:02:57.794Z</updated>
    
    <content type="html"><![CDATA[<p>关于bash里面的变量引用问题。</p><a id="more"></a><p>在bash里面，变量引用有两种写法：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">List=<span class="string">"one two three"</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$List</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"List"</span></span><br></pre></td></tr></table></figure><p>一般来说，这两种写法都可以，但是如果原始的字符串里面包含回车，换行等特殊字符的时候就不一样了：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line">a=<span class="string">'a</span></span><br><span class="line"><span class="string">b'</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$a</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"<span class="variable">$a</span>"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出：</span></span><br><span class="line">a b</span><br><span class="line">a</span><br><span class="line">b</span><br></pre></td></tr></table></figure><p>可以看到，a后面其实是有一个回车的，只是没有显示出来。用<code>od</code>命令可以看到：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="variable">$a</span> | od -A d -t c</span><br><span class="line"><span class="built_in">echo</span> <span class="string">"<span class="variable">$a</span>"</span> | od -A d -t c</span><br><span class="line"></span><br><span class="line">0000000   a       b  \n</span><br><span class="line">0000004</span><br><span class="line">0000000   a  \n   b  \n</span><br><span class="line">0000004</span><br></pre></td></tr></table></figure><p>所以说，加双引号的变量引用，保留了原来的格式，而没有加引号的变量引用里面的换行被替换了。<br>那么是由什么来控制替换的呢？bash的IFS（Internal Field Separator，内部域分隔符）<br>默认值为空白（包括：空格，tab和新行）。</p><blockquote><p>Shell 的环境变量分为 set, env 两种，其中 set 变量可以通过 export 工具导入到 env 变量中。其中，set 是显示设置shell变量，仅在本 shell 中有效；env 是显示设置用户环境变量 ，仅在当前会话中有效。换句话说，set 变量里包含了 env 变量，但 set 变量不一定都是 env 变量。这两种变量不同之处在于变量的作用域不同。显然，env 变量的作用域要大些，它可以在 subshell 中使用。</p></blockquote><p>IFS就是一种set变量，当处理命令替换和参数替换时，shell根据IFS的值，默认是space,tab,newline来拆解读入的变量，然后对特殊字符进行处理，最后重新组合赋值给该变量。</p><p>所以下面的例子：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">IFS=<span class="string">'\'</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$var</span>        <span class="comment"># '(] &#123;&#125;$"</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"<span class="variable">$var</span>"</span>      <span class="comment"># '(]\&#123;&#125;$"</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;关于bash里面的变量引用问题。&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="linux" scheme="http://yoursite.com/tags/linux/"/>
    
      <category term="bash" scheme="http://yoursite.com/tags/bash/"/>
    
  </entry>
  
  <entry>
    <title>树莓派Plex搭建</title>
    <link href="http://yoursite.com/2020/03/28/%E6%A0%91%E8%8E%93%E6%B4%BEPlex%E6%90%AD%E5%BB%BA/"/>
    <id>http://yoursite.com/2020/03/28/%E6%A0%91%E8%8E%93%E6%B4%BEPlex%E6%90%AD%E5%BB%BA/</id>
    <published>2020-03-28T05:33:29.000Z</published>
    <updated>2021-06-12T14:02:58.151Z</updated>
    
    <content type="html"><![CDATA[<p>之前用树莓派配置了透明代理，既然树莓派有千兆网口，还有usb3.0，就想着用来做一个简易的NAS吧，然后看到plex的界面还是挺好看的，自动加封面、局域网同步观看进度等一大堆功能，</p><a id="more"></a><p>usb3.0的理论传输速率是5Gbps，查看一下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">pi@raspberrypi:~ $ lsusb -t</span><br><span class="line">/:  Bus 02.Port 1: Dev 1, Class=root_hub, Driver=xhci_hcd/4p, 5000M</span><br><span class="line">    |__ Port 2: Dev 2, If 0, Class=Mass Storage, Driver=usb-storage, 5000M</span><br><span class="line">/:  Bus 01.Port 1: Dev 1, Class=root_hub, Driver=xhci_hcd/1p, 480M</span><br><span class="line">    |__ Port 1: Dev 2, If 0, Class=Hub, Driver=hub/4p, 480M</span><br></pre></td></tr></table></figure><p>关于千兆网口中间还有一个小插曲，就是刚开始我用ssh内网传输文件最大速度大概在11MB/s，就很奇怪，明明是千兆啊，于是我用下面的命令测试了一下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">在树莓派：</span><br><span class="line">$ nc -l -p 3333 &lt; /dev/zero</span><br><span class="line">然后在我的主机：</span><br><span class="line">$ nc 192.168.2.237 3333 &gt; /dev/null</span><br><span class="line">在pi上用nlaod命令：</span><br><span class="line">$ nload</span><br></pre></td></tr></table></figure><p>最后发现最大只有百兆，然后我的路由口都是千兆的，主机的网口也是，最后发现是主机的那条网线只支持百兆，于是重新换了一条六类的线。（我以前200兆带宽的时候用的也是那条线啊，干！）</p><p>重新测试：<br><img src="/2020/03/28/%E6%A0%91%E8%8E%93%E6%B4%BEPlex%E6%90%AD%E5%BB%BA/Screenshot_20200328_135155.png" alt="result"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rsync -av --progress --remove-source-files your_movie.mkv pi:/media/pi/Movies</span><br></pre></td></tr></table></figure><p>然后内网传输还是在45MB/s = =。不过比之前还是提升了差不多4倍。</p><blockquote><p>用dd命令测试磁盘io读写：<br>读： <code>$ dd if=tempfile of=/dev/null bs=1M count=1024</code>(指定磁盘：<code>$ dd if=/media/pi/tempfile of=/dev/null bs=1M count=1024</code>)<br>写： <code>$ sync; dd if=/dev/zero of=tempfile bs=1M count=1024; sync</code>（指定磁盘: <code>$ sync; dd if=/dev/zero of=/media/pi/tempfile bs=1M count=1024; sync</code>）</p></blockquote><h3 id="安装plex"><a href="#安装plex" class="headerlink" title="安装plex"></a>安装plex</h3><p>首先下载plex for debian：<br><a href="https://www.plex.tv/media-server-downloads/#plex-media-server" target="_blank" rel="noopener">https://www.plex.tv/media-server-downloads/#plex-media-server</a><br>选树莓派的架构armv7。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">sudo dpkg -i plexmediaserver_1.16.5.1488-deeb86e7f_amd64.deb</span><br><span class="line"></span><br><span class="line">systemctl start plexmediaserver</span><br><span class="line"></span><br><span class="line">systemctl <span class="built_in">enable</span> plexmediaserver</span><br></pre></td></tr></table></figure><p>然后访问<code>http://{your_pi_ip}:32400/web</code>，就可以登录了。可以根据文件夹添加liarary。先要把移动硬盘挂载到树莓派。</p><h3 id="挂载磁盘"><a href="#挂载磁盘" class="headerlink" title="挂载磁盘"></a>挂载磁盘</h3><h4 id="分区"><a href="#分区" class="headerlink" title="分区"></a>分区</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">sudo fdisk -l</span><br><span class="line"></span><br><span class="line">找到对应的硬盘, 我这里是/dev/sda</span><br><span class="line"></span><br><span class="line">sudo fdisk /dev/sda</span><br><span class="line"></span><br><span class="line">先把老的分区删除，然后新建分区。</span><br><span class="line"></span><br><span class="line">最后格式化为ext4(我只分了一个区)</span><br><span class="line"></span><br><span class="line">sudo mkfs.ext4 /dev/sda1</span><br></pre></td></tr></table></figure><h4 id="挂载"><a href="#挂载" class="headerlink" title="挂载"></a>挂载</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sudo mount /dev/sda1 /media/pi</span><br><span class="line"></span><br><span class="line">设置开机自动挂载，在/etc/fstab写入一下内容：</span><br><span class="line">/dev/sda1       /media/pi      ext4    defaults  0 0</span><br></pre></td></tr></table></figure><p>更新：前面的分区信息不是很好，因为这个是变化的，比如你移除了一个硬盘，这个值就变了，所以我们用设备的uuid：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">UUID=226a1c77-a51a-481e-aa2a-4f5e3c13a3bf       /media/piext4defaults 0 0</span><br></pre></td></tr></table></figure><p>后面几个参数的含义就不写了，按照上面的值设定就可以了。</p><p><code>df -h</code>查看一下：<br><img src="/2020/03/28/%E6%A0%91%E8%8E%93%E6%B4%BEPlex%E6%90%AD%E5%BB%BA/Screenshot_20200328_150605.png" alt="result"></p><p>然后就可以在这个目录里面新建你的资源目录，比如movie或者tv，最后在plex添加liarary。<br><img src="/2020/03/28/%E6%A0%91%E8%8E%93%E6%B4%BEPlex%E6%90%AD%E5%BB%BA/Screenshot_20200328_141754.png" alt="add library"></p><p>大功告成！现在就可以欣赏电影啦！<br><img src="/2020/03/28/%E6%A0%91%E8%8E%93%E6%B4%BEPlex%E6%90%AD%E5%BB%BA/Screenshot_20200328_150910.png" alt="result"></p><p>还有几个小问题：<br>树莓派对于视频的服务端硬解好像不太行，所以必须要用客户端，也就是播放器来硬件解码，官方也有各种平台的播放器。Windows，ios，macOS等都支持，唯独没有linux。。。如果用网页直接看的话就有点卡。<br>可以用下面这个appImage：<br><a href="https://knapsu.eu/plex/" target="_blank" rel="noopener">https://knapsu.eu/plex/</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">下载appImage:</span><br><span class="line">$ chmod +x Plex_Media_Player_20200326_80d5fa29_x64.AppImage</span><br><span class="line"></span><br><span class="line">然后直接运行：</span><br><span class="line">./Plex_Media_Player_20200326_80d5fa29_x64.AppImage</span><br><span class="line"></span><br><span class="line">如果有qt5的报错，执行：</span><br><span class="line">sudo ln -sf /usr/lib/x86_64-linux-gnu/qt5/plugins/platforms/ /usr/bin/</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;之前用树莓派配置了透明代理，既然树莓派有千兆网口，还有usb3.0，就想着用来做一个简易的NAS吧，然后看到plex的界面还是挺好看的，自动加封面、局域网同步观看进度等一大堆功能，&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="plex" scheme="http://yoursite.com/tags/plex/"/>
    
  </entry>
  
  <entry>
    <title>debian resolvconf and resolv.conf</title>
    <link href="http://yoursite.com/2020/03/11/debian-resolvconf-and-resolv-conf/"/>
    <id>http://yoursite.com/2020/03/11/debian-resolvconf-and-resolv-conf/</id>
    <published>2020-03-10T16:36:32.000Z</published>
    <updated>2021-06-12T14:02:57.794Z</updated>
    
    <content type="html"><![CDATA[<p>debian的dns服务器配置。</p><a id="more"></a><p>debian的<code>/etc/resolv.conf</code>，如果是一个软链接到<code>/etc/resolvconf/run/resolv.conf</code>，那么修改<code>/etc/resolv.conf</code>是不行的，重启后就会失效，它是被<code>resolvconf</code>这个程序控制的。所以要修改的话要改<code>/etc/network/interfaces</code>, 添加下面的dns-nameservers配置：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">gateway 192.168.1.1</span><br><span class="line">dns-nameservers 192.168.2.1</span><br></pre></td></tr></table></figure><p>还有一个配置是<code>/etc/resolvconf/resolv.conf.d/head</code>，如果head里面有配置的话，开机也会将配置写入<code>/etc/resolv.conf</code>，目录下面还有一个base文件，好像不行。。有点复杂= =。</p><p><a href="https://wiki.debian.org/zh_CN/NetworkConfiguration#A.2BYktSqJFNf25jpVPj-" target="_blank" rel="noopener">debian wiki</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;debian的dns服务器配置。&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="debian" scheme="http://yoursite.com/tags/debian/"/>
    
      <category term="dns" scheme="http://yoursite.com/tags/dns/"/>
    
  </entry>
  
  <entry>
    <title>iptables trace log</title>
    <link href="http://yoursite.com/2020/03/03/iptables-trace-log/"/>
    <id>http://yoursite.com/2020/03/03/iptables-trace-log/</id>
    <published>2020-03-03T14:31:56.000Z</published>
    <updated>2021-06-12T14:02:58.134Z</updated>
    
    <content type="html"><![CDATA[<p>根着<a href="https://tonybai.com/2017/11/06/explain-docker-single-host-network-using-iptables-trace-and-ebtables-log/" target="_blank" rel="noopener">这篇博客</a>，分析了一下docker的单机网络，把一些命令和操作记下来。</p><a id="more"></a><h2 id="开启trace功能"><a href="#开启trace功能" class="headerlink" title="开启trace功能"></a>开启trace功能</h2><h3 id="iptables"><a href="#iptables" class="headerlink" title="iptables"></a>iptables</h3><p>trace target只能在raw表中添加：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ iptables -t raw -A OUTPUT -p icmp -j TRACE</span><br><span class="line">$ iptables -t raw -A PREROUTING -p icmp -j TRACE</span><br></pre></td></tr></table></figure><p>查看/var/log/messages有没有日志，可能还需要加载一下模块：<br><code>modprobe nf_log_ipv4</code></p><h3 id="ebtables"><a href="#ebtables" class="headerlink" title="ebtables"></a>ebtables</h3><p>ebtables是一个二层的防火墙。在每一个build-in chain都加上log：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ ebtables -t broute -A BROUTING -p ipv4 --ip-proto 1 --<span class="built_in">log</span>-level 6 --<span class="built_in">log</span>-ip --<span class="built_in">log</span>-prefix <span class="string">"TRACE: eb:broute:BROUTING"</span> -j ACCEPT</span><br><span class="line">$ ebtables -t nat -A OUTPUT -p ipv4 --ip-proto 1 --<span class="built_in">log</span>-level 6 --<span class="built_in">log</span>-ip --<span class="built_in">log</span>-prefix <span class="string">"TRACE: eb:nat:OUTPUT"</span>  -j ACCEPT</span><br><span class="line">$ ebtables -t nat -A PREROUTING -p ipv4 --ip-proto 1 --<span class="built_in">log</span>-level 6 --<span class="built_in">log</span>-ip --<span class="built_in">log</span>-prefix <span class="string">"TRACE: eb:nat:PREROUTING"</span> -j ACCEPT</span><br><span class="line">$ ebtables -t filter -A INPUT -p ipv4 --ip-proto 1 --<span class="built_in">log</span>-level 6 --<span class="built_in">log</span>-ip --<span class="built_in">log</span>-prefix <span class="string">"TRACE: eb:filter:INPUT"</span> -j ACCEPT</span><br><span class="line">$ ebtables -t filter -A FORWARD -p ipv4 --ip-proto 1 --<span class="built_in">log</span>-level 6 --<span class="built_in">log</span>-ip --<span class="built_in">log</span>-prefix <span class="string">"TRACE: eb:filter:FORWARD"</span> -j ACCEPT</span><br><span class="line">$ ebtables -t filter -A OUTPUT -p ipv4 --ip-proto 1 --<span class="built_in">log</span>-level 6 --<span class="built_in">log</span>-ip --<span class="built_in">log</span>-prefix <span class="string">"TRACE: eb:filter:OUTPUT"</span> -j ACCEPT</span><br><span class="line">$ ebtables -t nat -A POSTROUTING -p ipv4 --ip-proto 1 --<span class="built_in">log</span>-level 6 --<span class="built_in">log</span>-ip --<span class="built_in">log</span>-prefix <span class="string">"TRACE: eb:nat:POSTROUTING"</span> -j ACCEPT</span><br></pre></td></tr></table></figure><p>剩下的就是分析了。</p><p><img src="/2020/03/03/iptables-trace-log/nf-packet-flow.png" alt="nf-packet-flow"></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;根着&lt;a href=&quot;https://tonybai.com/2017/11/06/explain-docker-single-host-network-using-iptables-trace-and-ebtables-log/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;这篇博客&lt;/a&gt;，分析了一下docker的单机网络，把一些命令和操作记下来。&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="linux" scheme="http://yoursite.com/tags/linux/"/>
    
      <category term="iptables" scheme="http://yoursite.com/tags/iptables/"/>
    
  </entry>
  
  <entry>
    <title>change swap size in linux</title>
    <link href="http://yoursite.com/2020/02/29/change-swap-size-in-linux/"/>
    <id>http://yoursite.com/2020/02/29/change-swap-size-in-linux/</id>
    <published>2020-02-29T08:08:54.000Z</published>
    <updated>2021-06-12T14:02:57.794Z</updated>
    
    <content type="html"><![CDATA[<p>内存太小了，只能用swap来顶替了。。</p><a id="more"></a><h2 id="几条命令就好了"><a href="#几条命令就好了" class="headerlink" title="几条命令就好了"></a>几条命令就好了</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">$ sudo swapoff -a</span><br><span class="line"></span><br><span class="line">$ sudo dd <span class="keyword">if</span>=/dev/zero of=/swapfile bs=1G count=8</span><br><span class="line"><span class="keyword">if</span> = input file</span><br><span class="line">of = output file</span><br><span class="line">bs = block size</span><br><span class="line">count = multiplier of blocks</span><br><span class="line"></span><br><span class="line">$ sudo mkswap /swapfile</span><br><span class="line"></span><br><span class="line">$ sudo swapon /swapfile</span><br><span class="line"></span><br><span class="line">$ grep SwapTotal /proc/meminfo</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;内存太小了，只能用swap来顶替了。。&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="linux" scheme="http://yoursite.com/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>shell基础知识</title>
    <link href="http://yoursite.com/2020/01/11/shell%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
    <id>http://yoursite.com/2020/01/11/shell%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/</id>
    <published>2020-01-11T14:06:28.000Z</published>
    <updated>2021-06-12T14:02:58.147Z</updated>
    
    <content type="html"><![CDATA[<p>shell基础</p><a id="more"></a><h3 id="管道和重定向"><a href="#管道和重定向" class="headerlink" title="管道和重定向"></a>管道和重定向</h3><ul><li>重定向<br>下面的命令演示了STDOUT和STDERR分开处理的原因：</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ find / -name core</span><br><span class="line">这样会导致很多‘permission denied’这样的信息；</span><br><span class="line">$ find / -name core 2&gt; /dev/null</span><br><span class="line">把错误重定向到/dev/null</span><br><span class="line">$ find / -name core &gt; /tmp/corefiles 2&gt; /dev/null</span><br><span class="line">把匹配的路径重定向到一个文件；</span><br></pre></td></tr></table></figure><ul><li>管道</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ ps -ef | grep httpd</span><br><span class="line">把httpd进程打印出来；</span><br><span class="line">$ cut -d: -f7 &lt; /etc/passwd | sort -u</span><br><span class="line">把每个用户的shell路径选出来并排序。</span><br></pre></td></tr></table></figure><p>在一个脚本里，可以用反斜线把一条命令分成多行来写，如果要实现相反的效果，将多条命令整合在一行，可以用分号作为语句分隔符。</p><h3 id="变量和引用"><a href="#变量和引用" class="headerlink" title="变量和引用"></a>变量和引用</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ mylang=<span class="string">"Pennsylvania Dutch"</span></span><br><span class="line">$ <span class="built_in">echo</span> <span class="string">"I speak <span class="variable">$&#123;mylang&#125;</span>"</span></span><br><span class="line">I speak Pennsylvania Dutch</span><br><span class="line">$ <span class="built_in">echo</span> <span class="string">'I speak $&#123;mylang&#125;'</span></span><br><span class="line">I speak <span class="variable">$&#123;mylang&#125;</span></span><br></pre></td></tr></table></figure><h2 id="bash脚本"><a href="#bash脚本" class="headerlink" title="bash脚本"></a>bash脚本</h2><p>下面是一个有用的例子：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">$ find . -<span class="built_in">type</span> f -name <span class="string">'*.log'</span> 2&gt; /dev/null</span><br><span class="line">./leather.log</span><br><span class="line">./foo.log</span><br><span class="line">./genius/spew.log</span><br><span class="line">./.<span class="keyword">do</span>-not-touch/important.log</span><br><span class="line"></span><br><span class="line">需要把‘’.<span class="keyword">do</span>-not-touch目录排除：</span><br><span class="line">$ find . -<span class="built_in">type</span> f -name <span class="string">'*.log'</span> 2&gt; /dev/null  | grep -v .<span class="keyword">do</span>-not-touch  </span><br><span class="line">./leather.log</span><br><span class="line">./foo.log</span><br><span class="line">./genius/spew.log</span><br><span class="line"></span><br><span class="line">生成一些新的名字：</span><br><span class="line">$ find . -<span class="built_in">type</span> f -name <span class="string">'*.log'</span> 2&gt; /dev/null  | grep -v .<span class="keyword">do</span>-not-touch  | <span class="keyword">while</span> <span class="built_in">read</span> fname</span><br><span class="line">&gt; <span class="keyword">do</span></span><br><span class="line">&gt; <span class="built_in">echo</span> mv <span class="variable">$fname</span> <span class="variable">$&#123;fname/.log/.LOG&#125;</span></span><br><span class="line">&gt; <span class="keyword">done</span></span><br><span class="line">mv ./leather.log ./leather.LOG</span><br><span class="line">mv ./foo.log ./foo.LOG</span><br><span class="line">mv ./genius/spew.log ./genius/spew.LOG</span><br><span class="line"></span><br><span class="line">生成的这几条命令就是我们需要的，当我们输入&lt;ctrl-p&gt;的时候，发现bash已经把上面的命令变成了一行：</span><br><span class="line">$ find . -<span class="built_in">type</span> f -name <span class="string">'*.log'</span> 2&gt; /dev/null | grep -v .<span class="keyword">do</span>-not-touch  | <span class="keyword">while</span> <span class="built_in">read</span> fname; <span class="keyword">do</span> <span class="built_in">echo</span> mv <span class="variable">$fname</span> <span class="variable">$&#123;fname/.log/.LOG&#125;</span>; <span class="keyword">done</span> | bash -x</span><br><span class="line">加上<span class="string">'bash -x'</span>，执行每条命令之前都会打印这条命令。最后用<span class="built_in">fc</span>命令把送到用户的默认文本剪辑器，加上必要的<span class="comment">#！和说明。</span></span><br><span class="line">&gt; 修改默认文本编辑器：<span class="built_in">echo</span> <span class="built_in">export</span> EDITOR=/usr/bin/vim &gt;&gt; ~/.bashrc</span><br></pre></td></tr></table></figure><p>总结步骤：</p><ol><li><p>按一个管道的方式开发脚本，完全在命令行上做；</p></li><li><p>把输出送到标准输出，检查并确保结果正确；</p></li><li><p>每一步，用<ctrl-p>重新找回命令；</ctrl-p></p></li><li><p>用fc命令捕获并修改命令；</p></li></ol><h3 id="输入和输出"><a href="#输入和输出" class="headerlink" title="输入和输出"></a>输入和输出</h3><p>如果要对输出做更多的控制，需要使用printf命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">printf</span>  <span class="string">"\taa\tbb\tcc"</span></span><br><span class="line">    aa  bb  cc</span><br></pre></td></tr></table></figure><p>用read命令可以提示输入：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> -n <span class="string">"Enter your name: "</span></span><br><span class="line"><span class="built_in">read</span> user_name</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [ -n <span class="string">"<span class="variable">$user_name</span>"</span> ]; <span class="keyword">then</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"Hello, <span class="variable">$user_name</span>!"</span></span><br><span class="line">    <span class="built_in">exit</span> 0</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"You did not tell you name!"</span></span><br><span class="line">    <span class="built_in">exit</span> 1</span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure><p>echo命令的-n选项消除了通常的换行符。if的-n判断其字符串参数是否为空。</p><h3 id="命令行参数与函数"><a href="#命令行参数与函数" class="headerlink" title="命令行参数与函数"></a>命令行参数与函数</h3><ul><li>$1: 第一个参数</li><li>$0: 该脚本所用的名字</li><li>$#: 参数的个数</li><li>$*: 保存有全部的参数</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> show_usage &#123;</span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"Usage: <span class="variable">$0</span> source_dir dest_dir"</span></span><br><span class="line">    <span class="built_in">exit</span> 1</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># Main program starts here</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [ <span class="variable">$#</span> -ne 2 ]; <span class="keyword">then</span></span><br><span class="line">    show_usage</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    <span class="keyword">if</span> [ -d <span class="variable">$1</span> ]; <span class="keyword">then</span></span><br><span class="line">        source_dir=<span class="variable">$1</span></span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="built_in">echo</span> <span class="string">"Invalid source directory"</span></span><br><span class="line">        show_usage</span><br><span class="line">    <span class="keyword">fi</span></span><br><span class="line">    <span class="keyword">if</span> [ -d <span class="variable">$2</span> ]; <span class="keyword">then</span></span><br><span class="line">        dest_dir=<span class="variable">$2</span></span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="built_in">echo</span> <span class="string">"Invalid dest directory"</span></span><br><span class="line">        show_usage</span><br><span class="line">    <span class="keyword">fi</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span> <span class="string">"Source directory is <span class="variable">$&#123;source_dir&#125;</span>\n"</span></span><br><span class="line"><span class="built_in">printf</span> <span class="string">"Destination directory is <span class="variable">$&#123;dest_dir&#125;</span>\n"</span></span><br></pre></td></tr></table></figure><p>可以改进show_usage函数：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> show_usage &#123;</span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"Usage: <span class="variable">$0</span> source_dir dest_dir"</span></span><br><span class="line">    <span class="keyword">if</span> [ <span class="variable">$#</span> -eq 0 ]; <span class="keyword">then</span></span><br><span class="line">        <span class="built_in">exit</span> 99</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="built_in">exit</span> <span class="variable">$1</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">可以给一个确定的出错码值：</span><br><span class="line">show_usage 5</span><br></pre></td></tr></table></figure><p>在bash里，函数和命令之间很相似，用户可以在自己的~/.bash_profile文件里面定义自己的函数，然后在命令行上使用它们：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> ssh &#123;</span><br><span class="line">    /usr/bin/ssh -p 7988 $*</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="变量的作用域"><a href="#变量的作用域" class="headerlink" title="变量的作用域"></a>变量的作用域</h3><p>在脚本里的变量是全局变量，但是函数可以用local声明语句，创建自己的局部变量。</p><h3 id="控制流程"><a href="#控制流程" class="headerlink" title="控制流程"></a>控制流程</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> [ <span class="variable">$base</span> -eq 1 ] &amp;&amp; [ <span class="variable">$dm</span> -eq 1 ]; <span class="keyword">then</span></span><br><span class="line">    installDMBase</span><br><span class="line"><span class="keyword">elif</span> [ <span class="variable">$base</span> -ne 1 ] &amp;&amp; [ <span class="variable">$dm</span> -eq 1 ]; <span class="keyword">then</span></span><br><span class="line">    installBase</span><br><span class="line"><span class="keyword">elif</span> [ <span class="variable">$base</span> -eq 1 ] &amp;&amp; [ <span class="variable">$dm</span> -ne 1 ]; <span class="keyword">then</span></span><br><span class="line">    installDM</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">'==&gt; Install noting'</span></span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure><h3 id="循环"><a href="#循环" class="headerlink" title="循环"></a>循环</h3><p>可以对*或者?这样的模式匹配符进行扩展：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bsh</span></span><br><span class="line"></span><br><span class="line">suffix=BACKUP--`date +%Y%m%d-%H%M`</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> script <span class="keyword">in</span> *.sh; <span class="keyword">do</span></span><br><span class="line">    newname=<span class="string">"<span class="variable">$script</span>.<span class="variable">$suffix</span>"</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"Copying <span class="variable">$script</span> to <span class="variable">$newname</span>..."</span></span><br><span class="line">    cp <span class="variable">$script</span> <span class="variable">$newname</span></span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure><p>bash也有标准的for循环：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (( i=0; i &lt; <span class="variable">$CPU_COUNT</span>; i++ )); <span class="keyword">do</span></span><br><span class="line">    CPU_LIST=<span class="string">"<span class="variable">$CPU_LIST</span> <span class="variable">$i</span>"</span></span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure><p>下面是bash的while循环：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">exec</span> 0&lt;<span class="variable">$1</span></span><br><span class="line">counter=1</span><br><span class="line"><span class="keyword">while</span> <span class="built_in">read</span> line; <span class="keyword">do</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"<span class="variable">$counter</span>: <span class="variable">$line</span>"</span></span><br><span class="line">    $((counter++))</span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure><p>下面是输出结果：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ubuntu$ sh whileexample /etc/passwd</span><br></pre></td></tr></table></figure><p>这里的exec语句重新定义了脚本的标准输入，变成由第一个命令参数指定的文件。 </p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;shell基础&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="linux" scheme="http://yoursite.com/tags/linux/"/>
    
      <category term="shell" scheme="http://yoursite.com/tags/shell/"/>
    
  </entry>
  
  <entry>
    <title>nginx配置总结(二)</title>
    <link href="http://yoursite.com/2020/01/05/nginx%E9%85%8D%E7%BD%AE%E6%80%BB%E7%BB%93-%E4%BA%8C/"/>
    <id>http://yoursite.com/2020/01/05/nginx%E9%85%8D%E7%BD%AE%E6%80%BB%E7%BB%93-%E4%BA%8C/</id>
    <published>2020-01-05T06:56:21.000Z</published>
    <updated>2021-06-12T14:02:58.147Z</updated>
    
    <content type="html"><![CDATA[<p>ssl, basic_auth, certbot, reverse_proxy, load_balance</p><a id="more"></a><h3 id="ssl"><a href="#ssl" class="headerlink" title="ssl"></a>ssl</h3><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">worker_processes</span> auto;</span><br><span class="line">  </span><br><span class="line"><span class="section">events</span> &#123;</span><br><span class="line">  <span class="attribute">worker_connections</span> <span class="number">1024</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="section">http</span> &#123;</span><br><span class="line"></span><br><span class="line">  <span class="attribute">include</span> mime.types;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="section">server</span> &#123;</span><br><span class="line">    <span class="attribute">listen</span> <span class="number">80</span>;</span><br><span class="line">    <span class="attribute">server_name</span> localhost;</span><br><span class="line">    <span class="attribute">return</span> <span class="number">301</span> https://<span class="variable">$host</span><span class="variable">$request_uri</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="section">server</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">listen</span> <span class="number">443</span> ssl http2;</span><br><span class="line">    <span class="attribute">server_name</span> localhost;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">root</span> /sites/demo;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">index</span> index.html;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">ssl_certificate</span> /etc/nginx/ssl/self.crt;</span><br><span class="line">    <span class="attribute">ssl_certificate_key</span> /etc/nginx/ssl/self.key;</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Disable SSL</span></span><br><span class="line">    <span class="attribute">ssl_protocols</span> TLSv1 TLSv1.<span class="number">1</span> TLSv1.<span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Optimise cipher suits</span></span><br><span class="line">    <span class="attribute">ssl_prefer_server_ciphers</span> <span class="literal">on</span>;</span><br><span class="line">    <span class="attribute">ssl_ciphers</span> ECDH+AESGCM:ECDH+AES256:ECDH+AES128:DH+3DES:!ADH:!AECDH:!MD5;</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Enable DH Params</span></span><br><span class="line">    <span class="attribute">ssl_dhparam</span> /etc/nginx/ssl/dhparam.pem;</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Enable HSTS</span></span><br><span class="line">    <span class="attribute">add_header</span> Strict-Transport-Security <span class="string">"max-age=31536000"</span> always;</span><br><span class="line"></span><br><span class="line">    <span class="comment"># SSL sessions</span></span><br><span class="line">    <span class="attribute">ssl_session_cache</span> shared:SSL:<span class="number">40m</span>;</span><br><span class="line">    <span class="attribute">ssl_session_timeout</span> <span class="number">4h</span>;</span><br><span class="line">    <span class="attribute">ssl_session_tickets</span> <span class="literal">on</span>;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">location</span> / &#123;</span><br><span class="line">      <span class="attribute">try_files</span> <span class="variable">$uri</span> <span class="variable">$uri</span>/ =<span class="number">404</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">location</span> ~\.php$ &#123;</span><br><span class="line">      <span class="comment"># Pass php requests to the php-fpm service (fastcgi)</span></span><br><span class="line">      <span class="attribute">include</span> fastcgi.conf;</span><br><span class="line">      <span class="attribute">fastcgi_pass</span> unix:/run/php/php7.1-fpm.sock;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="basic-auth"><a href="#basic-auth" class="headerlink" title="basic_auth"></a>basic_auth</h3><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">    <span class="attribute">location</span> / &#123;</span><br><span class="line">      <span class="attribute">auth_basic</span> <span class="string">"Secure Area"</span>;</span><br><span class="line">      <span class="attribute">auth_basic_user_file</span> /etc/nginx/.htpasswd;</span><br><span class="line">      <span class="attribute">try_files</span> <span class="variable">$uri</span> <span class="variable">$uri</span>/ =<span class="number">404</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">### $ apt install htpasswd</span></span><br><span class="line"><span class="comment">### $ htpasswd -c /etc/nginx/.htpasswd</span></span><br></pre></td></tr></table></figure><h3 id="certbot"><a href="#certbot" class="headerlink" title="certbot"></a>certbot</h3><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">events</span> &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="section">http</span> &#123;</span><br><span class="line"></span><br><span class="line">  <span class="section">server</span> &#123;</span><br><span class="line">    <span class="attribute">listen</span> <span class="number">80</span>;</span><br><span class="line">    <span class="attribute">server_name</span> youdomain.com;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">location</span> / &#123;</span><br><span class="line">      <span class="attribute">return</span> <span class="number">200</span> <span class="string">'Hello from nginx.'</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">### 1. install certboot</span></span><br><span class="line"><span class="comment">### 2. $ certbot --nginx</span></span><br><span class="line"><span class="comment">### 3. $ ls -l /etc/letsencrypt/live/youdomain.com/</span></span><br><span class="line"><span class="comment">### 4. $ @weekly certbot renew</span></span><br></pre></td></tr></table></figure><h3 id="reverse-proxy"><a href="#reverse-proxy" class="headerlink" title="reverse_proxy"></a>reverse_proxy</h3><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">events</span> &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="section">http</span> &#123;</span><br><span class="line"></span><br><span class="line">  <span class="section">server</span> &#123;</span><br><span class="line">    <span class="attribute">listen</span> <span class="number">8888</span>;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">location</span> / &#123;</span><br><span class="line">      <span class="attribute">return</span> <span class="number">200</span> <span class="string">"Hello from nginx.\n"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">location</span> /php &#123;</span><br><span class="line">      <span class="attribute">proxy_set_header</span> proxied nginx;</span><br><span class="line">      <span class="attribute">proxy_pass</span> <span class="string">'http://localhost:9999/'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 1.</span></span><br><span class="line"><span class="comment">### $ curl http://localhost:8888</span></span><br><span class="line"><span class="comment">### Hello from nginx.</span></span><br><span class="line"></span><br><span class="line"><span class="comment">### $ php -S http://localhost:9999 resq.txt</span></span><br><span class="line"><span class="comment">### $ curl http://localhost:9999/resp.txt</span></span><br><span class="line"><span class="comment">### Hello from php</span></span><br><span class="line"></span><br><span class="line"><span class="comment">### 添加上面的nginx配置</span></span><br><span class="line"></span><br><span class="line"><span class="comment">### $ curl http://localhost:8888/php/resq.txt</span></span><br><span class="line"><span class="comment">### Hello from php</span></span><br><span class="line"><span class="comment">### $ curl http://localhost:8888/</span></span><br><span class="line"><span class="comment">### Hello from nginx.</span></span><br><span class="line"></span><br><span class="line"><span class="comment">### 在/etc/nginx下面新建一个show_request.php:</span></span><br><span class="line"><span class="comment">### &lt;?php</span></span><br><span class="line">    <span class="attribute">echo</span> <span class="string">'Path: '</span> . <span class="variable">$_SERVER</span>[<span class="string">'REQUEST_URI'</span>];</span><br><span class="line"><span class="comment">### php -S http://localhost:8888/php</span></span><br><span class="line"></span><br><span class="line"><span class="comment">### $ curl http://localhost:8888/php</span></span><br><span class="line"><span class="comment">### Path: /</span></span><br><span class="line"><span class="comment">### $ curl http://localhost:8888/php/some/url</span></span><br><span class="line"><span class="comment">### Path: //some/url</span></span><br><span class="line"><span class="comment">### 如果把praxy_pass 改成：'http://localhost/9999';</span></span><br><span class="line"><span class="comment">### $ curl http://localhost:8888/php</span></span><br><span class="line"><span class="comment">### Path: /php</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 2.</span></span><br><span class="line"><span class="comment">### 设置代理header，nginx到后端服务器之间的。</span></span><br></pre></td></tr></table></figure><h3 id="load-balance"><a href="#load-balance" class="headerlink" title="load_balance"></a>load_balance</h3><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">events</span> &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="section">http</span> &#123;</span><br><span class="line"></span><br><span class="line">  <span class="attribute">upstream</span> php_servers &#123;</span><br><span class="line">    <span class="attribute">server</span> localhost:<span class="number">10001</span>;</span><br><span class="line">    <span class="attribute">server</span> localhost:<span class="number">10002</span>;</span><br><span class="line">    <span class="attribute">server</span> localhost:<span class="number">10003</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="section">server</span> &#123;</span><br><span class="line">    <span class="attribute">listen</span> <span class="number">8888</span>;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">location</span> / &#123;</span><br><span class="line">      ip_hash</span><br><span class="line">      <span class="attribute">proxy_pass</span> http://php_servers;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 1.</span></span><br><span class="line"><span class="comment">### echo 'PHP server1' &gt; s1</span></span><br><span class="line"><span class="comment">### echo 'PHP server2' &gt; s2</span></span><br><span class="line"><span class="comment">### echo 'PHP server3' &gt; s3</span></span><br><span class="line"><span class="comment">### $ php -S localhost:10001 s1</span></span><br><span class="line"><span class="comment">### $ php -S localhost:10002 s2</span></span><br><span class="line"><span class="comment">### $ php -S localhost:10003 s3</span></span><br><span class="line"><span class="comment">### $ while sleep 0.5; do curl http://localhost:8888; done</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 2. load balancing method</span></span><br><span class="line"><span class="comment">### ip_hash: The method guarantees that requests from the same address get to the same server unless it is not available.</span></span><br><span class="line"><span class="comment">### least_conn: A request is sent to the server with the least number of active connections, again with server weights taken into consideration</span></span><br></pre></td></tr></table></figure><p>下面是一个资源：<br><a href="https://github.com/fcambus/nginx-resources" target="_blank" rel="noopener">https://github.com/fcambus/nginx-resources</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;ssl, basic_auth, certbot, reverse_proxy, load_balance&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="nginx" scheme="http://yoursite.com/tags/nginx/"/>
    
  </entry>
  
  <entry>
    <title>nginx配置总结(一)</title>
    <link href="http://yoursite.com/2020/01/04/nginx%E9%85%8D%E7%BD%AE%E6%80%BB%E7%BB%93/"/>
    <id>http://yoursite.com/2020/01/04/nginx%E9%85%8D%E7%BD%AE%E6%80%BB%E7%BB%93/</id>
    <published>2020-01-04T13:28:29.000Z</published>
    <updated>2021-06-12T14:02:58.147Z</updated>
    
    <content type="html"><![CDATA[<p>nginx的一些总结。</p><a id="more"></a><h3 id="location匹配规则"><a href="#location匹配规则" class="headerlink" title="location匹配规则"></a>location匹配规则</h3><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">events</span> &#123;&#125;</span><br><span class="line">  </span><br><span class="line"><span class="section">http</span> &#123;</span><br><span class="line">  <span class="attribute">include</span> mime.types;</span><br><span class="line"></span><br><span class="line">  <span class="section">server</span> &#123;</span><br><span class="line">    <span class="attribute">listen</span> <span class="number">80</span>;</span><br><span class="line">    <span class="attribute">server_name</span> <span class="number">127.0.0.1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">root</span> /sites/demo;</span><br><span class="line"></span><br><span class="line"><span class="comment">## 1</span></span><br><span class="line">    <span class="comment"># Prefix match</span></span><br><span class="line"><span class="comment">#    location /greet &#123;</span></span><br><span class="line"><span class="comment">#      return 200 'Hello from NGINX "/greet" location.';</span></span><br><span class="line"><span class="comment">#    &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">## 2</span></span><br><span class="line">    <span class="comment"># Exact match</span></span><br><span class="line"><span class="comment">#    location = /greet &#123;</span></span><br><span class="line"><span class="comment">#      return 200 'Hello from NGINX "/greet" location. - EXACT MATCH';</span></span><br><span class="line"><span class="comment">#    &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">## 3</span></span><br><span class="line">    <span class="comment"># REGEX match - case sensitive</span></span><br><span class="line"><span class="comment">#    location ~ /greet[0-9] &#123;</span></span><br><span class="line"><span class="comment">#      return 200 'Hello from NGINX "/greet" location. - REGEX MATCH';</span></span><br><span class="line"><span class="comment">#    &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">## 4</span></span><br><span class="line">    <span class="comment"># REGEX match - case insensitive</span></span><br><span class="line">    <span class="attribute">location</span> <span class="regexp">~* /greet[0-9]</span> &#123;</span><br><span class="line">      <span class="attribute">return</span> <span class="number">200</span> <span class="string">'Hello from NGINX "/greet" location. - REGEX MATCH INSENSITIVE'</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">## 5</span></span><br><span class="line">    <span class="comment"># Preferential Prefix match</span></span><br><span class="line">    <span class="attribute">location</span><span class="regexp"> ^~</span> /Greet2 &#123;</span><br><span class="line">      <span class="attribute">return</span> <span class="number">200</span> <span class="string">'Hello from NGINX "/greet" location.'</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">### 一、如果把1的路径改为‘/Greet2’，同时把4打开，发现匹配的是4，即使4的配置在后面。</span></span><br><span class="line"><span class="comment">### 二、如果把4和5打开，会发现先匹配的是5。</span></span><br><span class="line"><span class="comment">### 总结匹配的先后顺序：</span></span><br><span class="line"><span class="comment">### 1. Exact Match               =  uri</span></span><br><span class="line"><span class="comment">### 2. Preferential Prefix Match ^~ uri</span></span><br><span class="line"><span class="comment">### 3. REGEX Match               ~* uri</span></span><br><span class="line"><span class="comment">### 4. Prefix Match                 uri</span></span><br></pre></td></tr></table></figure><h3 id="rewrite-and-redirect"><a href="#rewrite-and-redirect" class="headerlink" title="rewrite and redirect"></a>rewrite and redirect</h3><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">events</span> &#123;&#125;</span><br><span class="line">  </span><br><span class="line"><span class="section">http</span> &#123;</span><br><span class="line">  <span class="attribute">include</span> mime.types;</span><br><span class="line"></span><br><span class="line">  <span class="section">server</span> &#123;</span><br><span class="line">    <span class="attribute">listen</span> <span class="number">80</span>;</span><br><span class="line">    <span class="attribute">server_name</span> <span class="number">127.0.0.1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">root</span> /sites/demo;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 1.</span></span><br><span class="line">    <span class="attribute">location</span> /logo &#123;</span><br><span class="line">      <span class="attribute">return</span> <span class="number">307</span> /thumb.png;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">### 把/logo的uri重定向到/thumb.png</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 2.</span></span><br><span class="line"><span class="comment">#    rewrite ^/user/\w+ /greet;</span></span><br><span class="line"><span class="comment">#    location /greet &#123;</span></span><br><span class="line"><span class="comment">#      return 200 "Hello user";</span></span><br><span class="line"><span class="comment">#    &#125;</span></span><br><span class="line">    <span class="comment">### 访问http://127.0.0.1/user/john，实际访问http://127.0.0.1/greet，但是浏览器地址栏的地址不变。</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 3.</span></span><br><span class="line"><span class="comment">#    rewrite ^/user/(\w+) /greet/$1;</span></span><br><span class="line">    <span class="attribute">location</span> = /greet/john &#123;</span><br><span class="line">      <span class="attribute">return</span> <span class="number">200</span> <span class="string">"Hello john"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">### 访问http://127.0.0.1/user/john，实际访问http://127.0.0.1/greet/john，会传递后面的正则。</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 4.</span></span><br><span class="line">    <span class="attribute">rewrite</span><span class="regexp"> ^/user/(\w+)</span> /greet/<span class="variable">$1</span> <span class="literal">last</span>;</span><br><span class="line">    <span class="attribute">rewrite</span><span class="regexp"> ^/greet/john</span> /thumb.png;</span><br><span class="line"></span><br><span class="line">    <span class="comment">### 如果后面有一个last，那这个rewrite就是最后一个rewrite规则，虽然后面还有rewrite也不会生效。</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h3><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">events</span> &#123;&#125;</span><br><span class="line">  </span><br><span class="line"><span class="section">http</span> &#123;</span><br><span class="line">  <span class="attribute">include</span> mime.types;</span><br><span class="line"></span><br><span class="line">  <span class="section">server</span> &#123;</span><br><span class="line">    <span class="attribute">listen</span> <span class="number">80</span>;</span><br><span class="line">    <span class="attribute">server_name</span> <span class="number">127.0.0.1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">root</span> /sites/demo;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">location</span> /inspect &#123;</span><br><span class="line">      <span class="attribute">return</span> <span class="number">200</span> <span class="string">"<span class="variable">$host</span>\n<span class="variable">$uri</span>\n<span class="variable">$args</span>\n<span class="variable">$arg_name</span>"</span>;</span><br><span class="line">      <span class="comment">### 访问：http://127.0.0.1/inspect?name=marlin</span></span><br><span class="line">      <span class="comment">### 返回：</span></span><br><span class="line">      <span class="comment">### 127.0.0.1</span></span><br><span class="line">      <span class="comment">### /inspect</span></span><br><span class="line">      <span class="comment">### name=marlin</span></span><br><span class="line">      <span class="comment">### marlin</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment"># Check static API key</span></span><br><span class="line"><span class="comment">#    if ( $arg_apikey != 1234 ) &#123;</span></span><br><span class="line"><span class="comment">#      return 401 "Incorrect API Key";</span></span><br><span class="line"><span class="comment">#    &#125;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># Check if weekend</span></span><br><span class="line">    <span class="attribute">set</span> <span class="variable">$weekend</span> <span class="string">'No'</span>;</span><br><span class="line">    <span class="attribute">if</span> ( <span class="variable">$date_local</span> <span class="regexp">~ 'Saturday|Sunday'</span> ) &#123;</span><br><span class="line">      <span class="attribute">set</span> <span class="variable">$weekend</span> <span class="string">'Yes'</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">location</span> /is_weekend &#123;</span><br><span class="line">      <span class="attribute">return</span> <span class="number">200</span> <span class="variable">$weekend</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="try-files"><a href="#try-files" class="headerlink" title="try_files"></a>try_files</h3><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">vents</span> &#123;&#125;</span><br><span class="line">  </span><br><span class="line"><span class="section">http</span> &#123;</span><br><span class="line">  <span class="attribute">include</span> mime.types;</span><br><span class="line"></span><br><span class="line">  <span class="section">server</span> &#123;</span><br><span class="line">    <span class="attribute">listen</span> <span class="number">80</span>;</span><br><span class="line">    <span class="attribute">server_name</span> <span class="number">127.0.0.1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">root</span> /sites/demo;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 1. try_files</span></span><br><span class="line"></span><br><span class="line">    <span class="attribute">try_files</span> <span class="variable">$uri</span> /cat.png /greet /friendly_404;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">location</span> /friendly_404 &#123;</span><br><span class="line">      <span class="attribute">return</span> <span class="number">404</span> <span class="string">"Sorry"</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    location /greet &#123;</span><br><span class="line">      <span class="attribute">return</span> <span class="number">200</span> <span class="string">"Hello user"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">### 访问‘http://127.0.0.1/nothing’</span></span><br><span class="line">    <span class="comment">### try_files 会查找第一个变量，发现在‘/sites/demo’目录下没有nothing这个文件或文件夹，继续下一个</span></span><br><span class="line">，也没有，以此类推，当所有参数都找不到的时候，最后会进行一个内部重定向。所以实际返回‘404 sorry’。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 2. named_location</span></span><br><span class="line"></span><br><span class="line">    <span class="attribute">try_files</span> <span class="variable">$uri</span> /cat.png /greet <span class="variable">@friendly_404</span>;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">location</span> <span class="variable">@friendly_404</span> &#123;</span><br><span class="line">      <span class="attribute">return</span> <span class="number">404</span> <span class="string">"Sorry"</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">### 把‘/’换成‘@’，命名location可以确保最后一个参数一定会被重定向。</span></span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3种指令"><a href="#3种指令" class="headerlink" title="3种指令"></a>3种指令</h3><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">events</span> &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">######################</span></span><br><span class="line"><span class="comment"># (1) Array Directive</span></span><br><span class="line"><span class="comment">######################</span></span><br><span class="line"><span class="comment"># Can be specified multiple times without overriding a previous setting</span></span><br><span class="line"><span class="comment"># Gets inherited by all child contexts</span></span><br><span class="line"><span class="comment"># Child context can override inheritance by re-declaring directive</span></span><br><span class="line"><span class="attribute">access_log</span> /var/log/nginx/access.log;</span><br><span class="line"><span class="attribute">access_log</span> /var/log/nginx/custom.log.gz custom_format;</span><br><span class="line"></span><br><span class="line"><span class="section">http</span> &#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment"># Include statement - non directive</span></span><br><span class="line">  <span class="attribute">include</span> mime.types;</span><br><span class="line"></span><br><span class="line">  <span class="section">server</span> &#123;</span><br><span class="line">    <span class="attribute">listen</span> <span class="number">80</span>;</span><br><span class="line">    <span class="attribute">server_name</span> site1.com;</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Inherits access_log from parent context (1)</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="section">server</span> &#123;</span><br><span class="line">    <span class="attribute">listen</span> <span class="number">80</span>;</span><br><span class="line">    <span class="attribute">server_name</span> site2.com;</span><br><span class="line"></span><br><span class="line">    <span class="comment">#########################</span></span><br><span class="line">    <span class="comment"># (2) Standard Directive</span></span><br><span class="line">    <span class="comment">#########################</span></span><br><span class="line">    <span class="comment"># Can only be declared once. A second declaration overrides the first</span></span><br><span class="line">    <span class="comment"># Gets inherited by all child contexts</span></span><br><span class="line">    <span class="comment"># Child context can override inheritance by re-declaring directive</span></span><br><span class="line">    <span class="attribute">root</span> /sites/site2;</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Completely overrides inheritance from (1)</span></span><br><span class="line">    <span class="attribute">access_log</span> <span class="literal">off</span>;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">location</span> /images &#123;</span><br><span class="line"></span><br><span class="line">      <span class="comment"># Uses root directive inherited from (2)</span></span><br><span class="line">      <span class="attribute">try_files</span> <span class="variable">$uri</span> /stock.png;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">location</span> /secret &#123;</span><br><span class="line">      <span class="comment">#######################</span></span><br><span class="line">      <span class="comment"># (3) Action Directive</span></span><br><span class="line">      <span class="comment">#######################</span></span><br><span class="line">      <span class="comment"># Invokes an action such as a rewrite or redirect</span></span><br><span class="line">      <span class="comment"># Inheritance does not apply as the request is either stopped (redirect/response) or re-evaluated (rewrite)</span></span><br><span class="line">      <span class="attribute">return</span> <span class="number">403</span> <span class="string">"You do not have permission to view this."</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="缓存和超时配置"><a href="#缓存和超时配置" class="headerlink" title="缓存和超时配置"></a>缓存和超时配置</h3><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">user</span> www-data;</span><br><span class="line"></span><br><span class="line"><span class="attribute">worker_processes</span> auto;</span><br><span class="line"></span><br><span class="line"><span class="section">events</span> &#123;</span><br><span class="line">  <span class="attribute">worker_connections</span> <span class="number">1024</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="section">http</span> &#123;</span><br><span class="line"></span><br><span class="line">  <span class="attribute">include</span> mime.types;</span><br><span class="line"></span><br><span class="line">  <span class="comment"># Buffer size for POST submissions</span></span><br><span class="line">  <span class="attribute">client_body_buffer_size</span> <span class="number">10K</span>;</span><br><span class="line">  <span class="attribute">client_max_body_size</span> <span class="number">8m</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment"># Buffer size for Headers</span></span><br><span class="line">  <span class="attribute">client_header_buffer_size</span> <span class="number">1k</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment"># Max time to receive client headers/body</span></span><br><span class="line">  <span class="attribute">client_body_timeout</span> <span class="number">12</span>;</span><br><span class="line">  <span class="attribute">client_header_timeout</span> <span class="number">12</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment"># Max time to keep a connection open for</span></span><br><span class="line">  <span class="attribute">keepalive_timeout</span> <span class="number">15</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment"># Max time for the client accept/receive a response</span></span><br><span class="line">  <span class="attribute">send_timeout</span> <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment"># Skip buffering for static files</span></span><br><span class="line">  <span class="attribute">sendfile</span> <span class="literal">on</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment"># Optimise sendfile packets</span></span><br><span class="line">  <span class="attribute">tcp_nopush</span> <span class="literal">on</span>;</span><br><span class="line"></span><br><span class="line">  <span class="section">server</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">listen</span> <span class="number">80</span>;</span><br><span class="line">    <span class="attribute">server_name</span> <span class="number">167.99.93.26</span>;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">root</span> /sites/demo;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">index</span> index.php index.html;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">location</span> / &#123;</span><br><span class="line">      <span class="attribute">try_files</span> <span class="variable">$uri</span> <span class="variable">$uri</span>/ =<span class="number">404</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">location</span> ~\.php$ &#123;</span><br><span class="line">      <span class="comment"># Pass php requests to the php-fpm service (fastcgi)</span></span><br><span class="line">      <span class="attribute">include</span> fastcgi.conf;</span><br><span class="line">      <span class="attribute">fastcgi_pass</span> unix:/run/php/php7.1-fpm.sock;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="headers-and-expires"><a href="#headers-and-expires" class="headerlink" title="headers and expires"></a>headers and expires</h3><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">worker_processes</span> auto;</span><br><span class="line">  </span><br><span class="line"><span class="section">events</span> &#123;</span><br><span class="line">  <span class="attribute">worker_connections</span> <span class="number">1024</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="section">http</span> &#123;</span><br><span class="line"></span><br><span class="line">  <span class="attribute">include</span> mime.types;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="section">server</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">listen</span> <span class="number">80</span>;</span><br><span class="line">    <span class="attribute">server_name</span> localhost;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">root</span> /sites/demo;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">index</span> index.php index.html;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">location</span> / &#123;</span><br><span class="line">      <span class="attribute">try_files</span> <span class="variable">$uri</span> <span class="variable">$uri</span>/ =<span class="number">404</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">location</span> ~\.php$ &#123;</span><br><span class="line">      <span class="comment"># Pass php requests to the php-fpm service (fastcgi)</span></span><br><span class="line">      <span class="attribute">include</span> fastcgi.conf;</span><br><span class="line">      <span class="attribute">fastcgi_pass</span> unix:/run/php/php7.1-fpm.sock;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">location</span> = /thumb.png &#123;</span><br><span class="line"></span><br><span class="line">      <span class="attribute">add_header</span> Cache-Control public;</span><br><span class="line">      <span class="attribute">add_header</span> Pragma public;</span><br><span class="line">      <span class="attribute">add_header</span> Vary Accept-Encoding;</span><br><span class="line">      <span class="attribute">expires</span> <span class="number">60m</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">### 60分钟的过期时间，文件缓存在客户端。</span></span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;nginx的一些总结。&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="nginx" scheme="http://yoursite.com/tags/nginx/"/>
    
  </entry>
  
  <entry>
    <title>一个简单的爬虫</title>
    <link href="http://yoursite.com/2019/12/16/%E4%B8%80%E4%B8%AA%E7%AE%80%E5%8D%95%E7%9A%84%E7%88%AC%E8%99%AB/"/>
    <id>http://yoursite.com/2019/12/16/%E4%B8%80%E4%B8%AA%E7%AE%80%E5%8D%95%E7%9A%84%E7%88%AC%E8%99%AB/</id>
    <published>2019-12-16T13:28:04.000Z</published>
    <updated>2021-06-12T14:02:58.147Z</updated>
    
    <content type="html"><![CDATA[<p>用scrapy和splash爬取花瓣网的图片。代码在：<a href="https://github.com/Narlim/picture_spider" target="_blank" rel="noopener">github</a></p><a id="more"></a><p>由于这个网站加载图片是用的<a href="https://zh.wikipedia.org/wiki/AJAX" target="_blank" rel="noopener">ajax</a>请求，不能简单地用scrapy直接爬，通过观察找出它的ajax请求规律：<br>打开firefox的debugg工具：<br><img src="/2019/12/16/%E4%B8%80%E4%B8%AA%E7%AE%80%E5%8D%95%E7%9A%84%E7%88%AC%E8%99%AB/a.png" alt="debug"></p><p>选中XHR（<a href="https://zh.wikipedia.org/wiki/XMLHttpRequest" target="_blank" rel="noopener">XMLHttpRequest</a>)，它的response是一个json数据，它的请求url为：<a href="https://huaban.com/favorite/beauty/?k457pe8h&amp;max=2839114681&amp;limit=20&amp;wfl=1" target="_blank" rel="noopener">https://huaban.com/favorite/beauty/?k457pe8h&amp;max=2839114681&amp;limit=20&amp;wfl=1</a>，仔细观察会发现这个url会变的只有’max=’这个key。而且下一个请求的这个key的值是返回json的’pins’里面的最后一个’pin_id’。<br>那么就知道它的ajax请求是怎么发起的了，剩下的就是很简单了，只要把这个url构造出来，发请求就好了。</p><p>还有一个问题就是上面的headers有两个定制的键值对：’X-Request’,’X-Requested-With’;如果不加那两个，是请求不到json数据的= =。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;用scrapy和splash爬取花瓣网的图片。代码在：&lt;a href=&quot;https://github.com/Narlim/picture_spider&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;github&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="python" scheme="http://yoursite.com/tags/python/"/>
    
      <category term="scrapy" scheme="http://yoursite.com/tags/scrapy/"/>
    
  </entry>
  
</feed>
